// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Moira.ApiClient.Client;
using Moira.ApiClient.Model;

namespace Moira.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITriggerApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TriggerApiEvents Events { get; }

        /// <summary>
        /// Create a new trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTriggerApiResponse"/>&gt;</returns>
        Task<ICreateTriggerApiResponse> CreateTriggerAsync(DtoTrigger dtoTrigger, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Create a new trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTriggerApiResponse"/>&gt;</returns>
        Task<ICreateTriggerApiResponse> CreateTriggerOrDefaultAsync(DtoTrigger dtoTrigger, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete triggers pager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePagerApiResponse"/>&gt;</returns>
        Task<IDeletePagerApiResponse> DeletePagerAsync(Option<string> pagerID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete triggers pager
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePagerApiResponse"/>&gt;</returns>
        Task<IDeletePagerApiResponse> DeletePagerOrDefaultAsync(Option<string> pagerID = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete metric from last check and all trigger pattern metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="name">Name of the target metric (optional, default to &quot;DevOps.my_server.hdd.freespace_mbytes&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerMetricApiResponse"/>&gt;</returns>
        Task<IDeleteTriggerMetricApiResponse> DeleteTriggerMetricAsync(string triggerID, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete metric from last check and all trigger pattern metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="name">Name of the target metric (optional, default to &quot;DevOps.my_server.hdd.freespace_mbytes&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerMetricApiResponse"/>&gt;</returns>
        Task<IDeleteTriggerMetricApiResponse> DeleteTriggerMetricOrDefaultAsync(string triggerID, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerNodataMetricsApiResponse"/>&gt;</returns>
        Task<IDeleteTriggerNodataMetricsApiResponse> DeleteTriggerNodataMetricsAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Delete all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerNodataMetricsApiResponse"/>&gt;</returns>
        Task<IDeleteTriggerNodataMetricsApiResponse> DeleteTriggerNodataMetricsOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes throttling for a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerThrottlingApiResponse"/>&gt;</returns>
        Task<IDeleteTriggerThrottlingApiResponse> DeleteTriggerThrottlingAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes throttling for a trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerThrottlingApiResponse"/>&gt;</returns>
        Task<IDeleteTriggerThrottlingApiResponse> DeleteTriggerThrottlingOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTriggersApiResponse"/>&gt;</returns>
        Task<IGetAllTriggersApiResponse> GetAllTriggersAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTriggersApiResponse"/>&gt;</returns>
        Task<IGetAllTriggersApiResponse> GetAllTriggersOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="populated">Populated (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerApiResponse"/>&gt;</returns>
        Task<IGetTriggerApiResponse> GetTriggerAsync(string triggerID, Option<bool> populated = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get an existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="populated">Populated (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerApiResponse"/>&gt;</returns>
        Task<IGetTriggerApiResponse> GetTriggerOrDefaultAsync(string triggerID, Option<bool> populated = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get trigger dump
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerDumpApiResponse"/>&gt;</returns>
        Task<IGetTriggerDumpApiResponse> GetTriggerDumpAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get trigger dump
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerDumpApiResponse"/>&gt;</returns>
        Task<IGetTriggerDumpApiResponse> GetTriggerDumpOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get metrics associated with certain trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-10minutes&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerMetricsApiResponse"/>&gt;</returns>
        Task<IGetTriggerMetricsApiResponse> GetTriggerMetricsAsync(string triggerID, Option<string> from = default, Option<string> to = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get metrics associated with certain trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-10minutes&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerMetricsApiResponse"/>&gt;</returns>
        Task<IGetTriggerMetricsApiResponse> GetTriggerMetricsOrDefaultAsync(string triggerID, Option<string> from = default, Option<string> to = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the trigger state as at last check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerStateApiResponse"/>&gt;</returns>
        Task<IGetTriggerStateApiResponse> GetTriggerStateAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the trigger state as at last check
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerStateApiResponse"/>&gt;</returns>
        Task<IGetTriggerStateApiResponse> GetTriggerStateOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerThrottlingApiResponse"/>&gt;</returns>
        Task<IGetTriggerThrottlingApiResponse> GetTriggerThrottlingAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerThrottlingApiResponse"/>&gt;</returns>
        Task<IGetTriggerThrottlingApiResponse> GetTriggerThrottlingOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get triggers noisiness
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="sort">String to set sort order (by events_count). On empty - no order, asc - ascending, desc - descending (optional, default to &quot;desc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggersNoisinessApiResponse"/>&gt;</returns>
        Task<IGetTriggersNoisinessApiResponse> GetTriggersNoisinessAsync(Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get triggers noisiness
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="sort">String to set sort order (by events_count). On empty - no order, asc - ascending, desc - descending (optional, default to &quot;desc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggersNoisinessApiResponse"/>&gt;</returns>
        Task<IGetTriggersNoisinessApiResponse> GetTriggersNoisinessOrDefaultAsync(Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get unused triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnusedTriggersApiResponse"/>&gt;</returns>
        Task<IGetUnusedTriggersApiResponse> GetUnusedTriggersAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get unused triggers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnusedTriggersApiResponse"/>&gt;</returns>
        Task<IGetUnusedTriggersApiResponse> GetUnusedTriggersOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveTriggerApiResponse"/>&gt;</returns>
        Task<IRemoveTriggerApiResponse> RemoveTriggerAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveTriggerApiResponse"/>&gt;</returns>
        Task<IRemoveTriggerApiResponse> RemoveTriggerOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Render trigger metrics plot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="target">Target metric name (optional, default to &quot;t1&quot;)</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-1hour&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="timezone">Timezone for rendering (optional, default to &quot;UTC&quot;)</param>
        /// <param name="theme">Plot theme (optional, default to &quot;light&quot;)</param>
        /// <param name="realtime">Fetch real-time data (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenderTriggerMetricsApiResponse"/>&gt;</returns>
        Task<IRenderTriggerMetricsApiResponse> RenderTriggerMetricsAsync(string triggerID, Option<string> target = default, Option<string> from = default, Option<string> to = default, Option<string> timezone = default, Option<string> theme = default, Option<bool> realtime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Render trigger metrics plot
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="target">Target metric name (optional, default to &quot;t1&quot;)</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-1hour&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="timezone">Timezone for rendering (optional, default to &quot;UTC&quot;)</param>
        /// <param name="theme">Plot theme (optional, default to &quot;light&quot;)</param>
        /// <param name="realtime">Fetch real-time data (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenderTriggerMetricsApiResponse"/>&gt;</returns>
        Task<IRenderTriggerMetricsApiResponse> RenderTriggerMetricsOrDefaultAsync(string triggerID, Option<string> target = default, Option<string> from = default, Option<string> to = default, Option<string> timezone = default, Option<string> theme = default, Option<bool> realtime = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path
        /// </summary>
        /// <remarks>
        /// You can also add filtering by tags, for this purpose add query parameters tags[0]&#x3D;test, tags[1]&#x3D;test1 and so on For example, &#x60;/api/trigger/search?tags[0]&#x3D;test&amp;tags[1]&#x3D;test1&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyProblems">Only include problems (optional, default to false)</param>
        /// <param name="text">Search text (optional, default to &quot;cpu&quot;)</param>
        /// <param name="p">Page number (optional, default to 0)</param>
        /// <param name="size">Page size (optional, default to 10)</param>
        /// <param name="tags">Search tag (optional)</param>
        /// <param name="createPager">Create pager (optional, default to false)</param>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="createdBy">Created By (optional, default to &quot;moira.team&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchTriggersApiResponse"/>&gt;</returns>
        Task<ISearchTriggersApiResponse> SearchTriggersAsync(Option<bool> onlyProblems = default, Option<string> text = default, Option<int> p = default, Option<int> size = default, Option<List<string>> tags = default, Option<bool> createPager = default, Option<string> pagerID = default, Option<string> createdBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path
        /// </summary>
        /// <remarks>
        /// You can also add filtering by tags, for this purpose add query parameters tags[0]&#x3D;test, tags[1]&#x3D;test1 and so on For example, &#x60;/api/trigger/search?tags[0]&#x3D;test&amp;tags[1]&#x3D;test1&#x60;
        /// </remarks>
        /// <param name="onlyProblems">Only include problems (optional, default to false)</param>
        /// <param name="text">Search text (optional, default to &quot;cpu&quot;)</param>
        /// <param name="p">Page number (optional, default to 0)</param>
        /// <param name="size">Page size (optional, default to 10)</param>
        /// <param name="tags">Search tag (optional)</param>
        /// <param name="createPager">Create pager (optional, default to false)</param>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="createdBy">Created By (optional, default to &quot;moira.team&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchTriggersApiResponse"/>&gt;</returns>
        Task<ISearchTriggersApiResponse> SearchTriggersOrDefaultAsync(Option<bool> onlyProblems = default, Option<string> text = default, Option<int> p = default, Option<int> size = default, Option<List<string>> tags = default, Option<bool> createPager = default, Option<string> pagerID = default, Option<string> createdBy = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set metrics and the trigger itself to maintenance mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTriggerMaintenance">Maintenance data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetTriggerMaintenanceApiResponse"/>&gt;</returns>
        Task<ISetTriggerMaintenanceApiResponse> SetTriggerMaintenanceAsync(DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Set metrics and the trigger itself to maintenance mode
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dtoTriggerMaintenance">Maintenance data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetTriggerMaintenanceApiResponse"/>&gt;</returns>
        Task<ISetTriggerMaintenanceApiResponse> SetTriggerMaintenanceOrDefaultAsync(DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validates trigger target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITriggerCheckApiResponse"/>&gt;</returns>
        Task<ITriggerCheckApiResponse> TriggerCheckAsync(DtoTrigger dtoTrigger, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Validates trigger target
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITriggerCheckApiResponse"/>&gt;</returns>
        Task<ITriggerCheckApiResponse> TriggerCheckOrDefaultAsync(DtoTrigger dtoTrigger, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTriggerApiResponse"/>&gt;</returns>
        Task<IUpdateTriggerApiResponse> UpdateTriggerAsync(DtoTrigger dtoTrigger, string triggerID, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update existing trigger
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTriggerApiResponse"/>&gt;</returns>
        Task<IUpdateTriggerApiResponse> UpdateTriggerOrDefaultAsync(DtoTrigger dtoTrigger, string triggerID, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateTriggerApiResponse"/>
    /// </summary>
    public interface ICreateTriggerApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoSaveTriggerResponse>, IBadRequest<Object>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>, IServiceUnavailable<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 503 ServiceUnavailable
        /// </summary>
        /// <returns></returns>
        bool IsServiceUnavailable { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePagerApiResponse"/>
    /// </summary>
    public interface IDeletePagerApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggersSearchResultDeleteResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteTriggerMetricApiResponse"/>
    /// </summary>
    public interface IDeleteTriggerMetricApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Object>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteTriggerNodataMetricsApiResponse"/>
    /// </summary>
    public interface IDeleteTriggerNodataMetricsApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Object>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteTriggerThrottlingApiResponse"/>
    /// </summary>
    public interface IDeleteTriggerThrottlingApiResponse : Moira.ApiClient.Client.IApiResponse, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllTriggersApiResponse"/>
    /// </summary>
    public interface IGetAllTriggersApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggersList>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetTriggerApiResponse"/>
    /// </summary>
    public interface IGetTriggerApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTrigger>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetTriggerDumpApiResponse"/>
    /// </summary>
    public interface IGetTriggerDumpApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggerDump>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetTriggerMetricsApiResponse"/>
    /// </summary>
    public interface IGetTriggerMetricsApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Dictionary<string, Dictionary<string, List<MoiraMetricValue>>>>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetTriggerStateApiResponse"/>
    /// </summary>
    public interface IGetTriggerStateApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggerCheck>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetTriggerThrottlingApiResponse"/>
    /// </summary>
    public interface IGetTriggerThrottlingApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoThrottlingResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetTriggersNoisinessApiResponse"/>
    /// </summary>
    public interface IGetTriggersNoisinessApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggerNoisinessList>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetUnusedTriggersApiResponse"/>
    /// </summary>
    public interface IGetUnusedTriggersApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggersList>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveTriggerApiResponse"/>
    /// </summary>
    public interface IRemoveTriggerApiResponse : Moira.ApiClient.Client.IApiResponse, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IRenderTriggerMetricsApiResponse"/>
    /// </summary>
    public interface IRenderTriggerMetricsApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<System.IO.Stream>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ISearchTriggersApiResponse"/>
    /// </summary>
    public interface ISearchTriggersApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggersList>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ISetTriggerMaintenanceApiResponse"/>
    /// </summary>
    public interface ISetTriggerMaintenanceApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Object>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ITriggerCheckApiResponse"/>
    /// </summary>
    public interface ITriggerCheckApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoTriggerCheckResponse>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>, IServiceUnavailable<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 503 ServiceUnavailable
        /// </summary>
        /// <returns></returns>
        bool IsServiceUnavailable { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateTriggerApiResponse"/>
    /// </summary>
    public interface IUpdateTriggerApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoSaveTriggerResponse>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>, IServiceUnavailable<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 503 ServiceUnavailable
        /// </summary>
        /// <returns></returns>
        bool IsServiceUnavailable { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TriggerApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateTrigger;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateTrigger;

        internal void ExecuteOnCreateTrigger(TriggerApi.CreateTriggerApiResponse apiResponse)
        {
            OnCreateTrigger?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateTrigger(Exception exception)
        {
            OnErrorCreateTrigger?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeletePager;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeletePager;

        internal void ExecuteOnDeletePager(TriggerApi.DeletePagerApiResponse apiResponse)
        {
            OnDeletePager?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePager(Exception exception)
        {
            OnErrorDeletePager?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteTriggerMetric;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteTriggerMetric;

        internal void ExecuteOnDeleteTriggerMetric(TriggerApi.DeleteTriggerMetricApiResponse apiResponse)
        {
            OnDeleteTriggerMetric?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTriggerMetric(Exception exception)
        {
            OnErrorDeleteTriggerMetric?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteTriggerNodataMetrics;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteTriggerNodataMetrics;

        internal void ExecuteOnDeleteTriggerNodataMetrics(TriggerApi.DeleteTriggerNodataMetricsApiResponse apiResponse)
        {
            OnDeleteTriggerNodataMetrics?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTriggerNodataMetrics(Exception exception)
        {
            OnErrorDeleteTriggerNodataMetrics?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteTriggerThrottling;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteTriggerThrottling;

        internal void ExecuteOnDeleteTriggerThrottling(TriggerApi.DeleteTriggerThrottlingApiResponse apiResponse)
        {
            OnDeleteTriggerThrottling?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteTriggerThrottling(Exception exception)
        {
            OnErrorDeleteTriggerThrottling?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllTriggers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllTriggers;

        internal void ExecuteOnGetAllTriggers(TriggerApi.GetAllTriggersApiResponse apiResponse)
        {
            OnGetAllTriggers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllTriggers(Exception exception)
        {
            OnErrorGetAllTriggers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTrigger;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTrigger;

        internal void ExecuteOnGetTrigger(TriggerApi.GetTriggerApiResponse apiResponse)
        {
            OnGetTrigger?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTrigger(Exception exception)
        {
            OnErrorGetTrigger?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTriggerDump;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTriggerDump;

        internal void ExecuteOnGetTriggerDump(TriggerApi.GetTriggerDumpApiResponse apiResponse)
        {
            OnGetTriggerDump?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTriggerDump(Exception exception)
        {
            OnErrorGetTriggerDump?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTriggerMetrics;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTriggerMetrics;

        internal void ExecuteOnGetTriggerMetrics(TriggerApi.GetTriggerMetricsApiResponse apiResponse)
        {
            OnGetTriggerMetrics?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTriggerMetrics(Exception exception)
        {
            OnErrorGetTriggerMetrics?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTriggerState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTriggerState;

        internal void ExecuteOnGetTriggerState(TriggerApi.GetTriggerStateApiResponse apiResponse)
        {
            OnGetTriggerState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTriggerState(Exception exception)
        {
            OnErrorGetTriggerState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTriggerThrottling;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTriggerThrottling;

        internal void ExecuteOnGetTriggerThrottling(TriggerApi.GetTriggerThrottlingApiResponse apiResponse)
        {
            OnGetTriggerThrottling?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTriggerThrottling(Exception exception)
        {
            OnErrorGetTriggerThrottling?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTriggersNoisiness;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTriggersNoisiness;

        internal void ExecuteOnGetTriggersNoisiness(TriggerApi.GetTriggersNoisinessApiResponse apiResponse)
        {
            OnGetTriggersNoisiness?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTriggersNoisiness(Exception exception)
        {
            OnErrorGetTriggersNoisiness?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetUnusedTriggers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetUnusedTriggers;

        internal void ExecuteOnGetUnusedTriggers(TriggerApi.GetUnusedTriggersApiResponse apiResponse)
        {
            OnGetUnusedTriggers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUnusedTriggers(Exception exception)
        {
            OnErrorGetUnusedTriggers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRemoveTrigger;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRemoveTrigger;

        internal void ExecuteOnRemoveTrigger(TriggerApi.RemoveTriggerApiResponse apiResponse)
        {
            OnRemoveTrigger?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveTrigger(Exception exception)
        {
            OnErrorRemoveTrigger?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRenderTriggerMetrics;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRenderTriggerMetrics;

        internal void ExecuteOnRenderTriggerMetrics(TriggerApi.RenderTriggerMetricsApiResponse apiResponse)
        {
            OnRenderTriggerMetrics?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRenderTriggerMetrics(Exception exception)
        {
            OnErrorRenderTriggerMetrics?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSearchTriggers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSearchTriggers;

        internal void ExecuteOnSearchTriggers(TriggerApi.SearchTriggersApiResponse apiResponse)
        {
            OnSearchTriggers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchTriggers(Exception exception)
        {
            OnErrorSearchTriggers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnSetTriggerMaintenance;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorSetTriggerMaintenance;

        internal void ExecuteOnSetTriggerMaintenance(TriggerApi.SetTriggerMaintenanceApiResponse apiResponse)
        {
            OnSetTriggerMaintenance?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetTriggerMaintenance(Exception exception)
        {
            OnErrorSetTriggerMaintenance?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTriggerCheck;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTriggerCheck;

        internal void ExecuteOnTriggerCheck(TriggerApi.TriggerCheckApiResponse apiResponse)
        {
            OnTriggerCheck?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTriggerCheck(Exception exception)
        {
            OnErrorTriggerCheck?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateTrigger;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateTrigger;

        internal void ExecuteOnUpdateTrigger(TriggerApi.UpdateTriggerApiResponse apiResponse)
        {
            OnUpdateTrigger?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateTrigger(Exception exception)
        {
            OnErrorUpdateTrigger?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TriggerApi : ITriggerApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TriggerApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TriggerApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TriggerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TriggerApi(ILogger<TriggerApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TriggerApiEvents triggerApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TriggerApi>();
            HttpClient = httpClient;
            Events = triggerApiEvents;
        }

        partial void FormatCreateTrigger(DtoTrigger dtoTrigger, ref Option<bool> validate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dtoTrigger"></param>
        /// <returns></returns>
        private void ValidateCreateTrigger(DtoTrigger dtoTrigger)
        {
            if (dtoTrigger == null)
                throw new ArgumentNullException(nameof(dtoTrigger));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="validate"></param>
        private void AfterCreateTriggerDefaultImplementation(ICreateTriggerApiResponse apiResponseLocalVar, DtoTrigger dtoTrigger, Option<bool> validate)
        {
            bool suppressDefaultLog = false;
            AfterCreateTrigger(ref suppressDefaultLog, apiResponseLocalVar, dtoTrigger, validate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="validate"></param>
        partial void AfterCreateTrigger(ref bool suppressDefaultLog, ICreateTriggerApiResponse apiResponseLocalVar, DtoTrigger dtoTrigger, Option<bool> validate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="validate"></param>
        private void OnErrorCreateTriggerDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTrigger dtoTrigger, Option<bool> validate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateTrigger(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dtoTrigger, validate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="validate"></param>
        partial void OnErrorCreateTrigger(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTrigger dtoTrigger, Option<bool> validate);

        /// <summary>
        /// Create a new trigger 
        /// </summary>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTriggerApiResponse"/>&gt;</returns>
        public async Task<ICreateTriggerApiResponse> CreateTriggerOrDefaultAsync(DtoTrigger dtoTrigger, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateTriggerAsync(dtoTrigger, validate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Create a new trigger 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTriggerApiResponse"/>&gt;</returns>
        public async Task<ICreateTriggerApiResponse> CreateTriggerAsync(DtoTrigger dtoTrigger, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateTrigger(dtoTrigger);

                FormatCreateTrigger(dtoTrigger, ref validate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validate.IsSet)
                        parseQueryStringLocalVar["validate"] = ClientUtils.ParameterToString(validate.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (dtoTrigger as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(dtoTrigger, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<CreateTriggerApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateTriggerApiResponse>();

                        CreateTriggerApiResponse apiResponseLocalVar = new CreateTriggerApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateTriggerDefaultImplementation(apiResponseLocalVar, dtoTrigger, validate);

                        Events.ExecuteOnCreateTrigger(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateTriggerDefaultImplementation(e, "/trigger", uriBuilderLocalVar.Path, dtoTrigger, validate);
                Events.ExecuteOnErrorCreateTrigger(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateTriggerApiResponse"/>
        /// </summary>
        public partial class CreateTriggerApiResponse : Moira.ApiClient.Client.ApiResponse, ICreateTriggerApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateTriggerApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateTriggerApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateTriggerApiResponse(ILogger<CreateTriggerApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoSaveTriggerResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoSaveTriggerResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoSaveTriggerResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Object BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Object result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public bool IsServiceUnavailable => 503 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse ServiceUnavailable()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsServiceUnavailable
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryServiceUnavailable(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = ServiceUnavailable();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)503);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePager(ref Option<string> pagerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="pagerID"></param>
        /// <returns></returns>
        private void ValidateDeletePager(Option<string> pagerID)
        {
            if (pagerID.IsSet && pagerID.Value == null)
                throw new ArgumentNullException(nameof(pagerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pagerID"></param>
        private void AfterDeletePagerDefaultImplementation(IDeletePagerApiResponse apiResponseLocalVar, Option<string> pagerID)
        {
            bool suppressDefaultLog = false;
            AfterDeletePager(ref suppressDefaultLog, apiResponseLocalVar, pagerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="pagerID"></param>
        partial void AfterDeletePager(ref bool suppressDefaultLog, IDeletePagerApiResponse apiResponseLocalVar, Option<string> pagerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pagerID"></param>
        private void OnErrorDeletePagerDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> pagerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePager(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, pagerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="pagerID"></param>
        partial void OnErrorDeletePager(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> pagerID);

        /// <summary>
        /// Delete triggers pager 
        /// </summary>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePagerApiResponse"/>&gt;</returns>
        public async Task<IDeletePagerApiResponse> DeletePagerOrDefaultAsync(Option<string> pagerID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePagerAsync(pagerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete triggers pager 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePagerApiResponse"/>&gt;</returns>
        public async Task<IDeletePagerApiResponse> DeletePagerAsync(Option<string> pagerID = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePager(pagerID);

                FormatDeletePager(ref pagerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/search/pager"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/search/pager");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (pagerID.IsSet)
                        parseQueryStringLocalVar["pagerID"] = ClientUtils.ParameterToString(pagerID.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeletePagerApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePagerApiResponse>();

                        DeletePagerApiResponse apiResponseLocalVar = new DeletePagerApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/search/pager", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePagerDefaultImplementation(apiResponseLocalVar, pagerID);

                        Events.ExecuteOnDeletePager(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePagerDefaultImplementation(e, "/trigger/search/pager", uriBuilderLocalVar.Path, pagerID);
                Events.ExecuteOnErrorDeletePager(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePagerApiResponse"/>
        /// </summary>
        public partial class DeletePagerApiResponse : Moira.ApiClient.Client.ApiResponse, IDeletePagerApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePagerApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePagerApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePagerApiResponse(ILogger<DeletePagerApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggersSearchResultDeleteResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggersSearchResultDeleteResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggersSearchResultDeleteResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteTriggerMetric(ref string triggerID, ref Option<string> name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateDeleteTriggerMetric(string triggerID, Option<string> name)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="name"></param>
        private void AfterDeleteTriggerMetricDefaultImplementation(IDeleteTriggerMetricApiResponse apiResponseLocalVar, string triggerID, Option<string> name)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTriggerMetric(ref suppressDefaultLog, apiResponseLocalVar, triggerID, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="name"></param>
        partial void AfterDeleteTriggerMetric(ref bool suppressDefaultLog, IDeleteTriggerMetricApiResponse apiResponseLocalVar, string triggerID, Option<string> name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="name"></param>
        private void OnErrorDeleteTriggerMetricDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<string> name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTriggerMetric(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="name"></param>
        partial void OnErrorDeleteTriggerMetric(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<string> name);

        /// <summary>
        /// Delete metric from last check and all trigger pattern metrics 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="name">Name of the target metric (optional, default to &quot;DevOps.my_server.hdd.freespace_mbytes&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerMetricApiResponse"/>&gt;</returns>
        public async Task<IDeleteTriggerMetricApiResponse> DeleteTriggerMetricOrDefaultAsync(string triggerID, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTriggerMetricAsync(triggerID, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete metric from last check and all trigger pattern metrics 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="name">Name of the target metric (optional, default to &quot;DevOps.my_server.hdd.freespace_mbytes&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerMetricApiResponse"/>&gt;</returns>
        public async Task<IDeleteTriggerMetricApiResponse> DeleteTriggerMetricAsync(string triggerID, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteTriggerMetric(triggerID, name);

                FormatDeleteTriggerMetric(ref triggerID, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/metrics"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/metrics");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteTriggerMetricApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTriggerMetricApiResponse>();

                        DeleteTriggerMetricApiResponse apiResponseLocalVar = new DeleteTriggerMetricApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/metrics", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTriggerMetricDefaultImplementation(apiResponseLocalVar, triggerID, name);

                        Events.ExecuteOnDeleteTriggerMetric(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTriggerMetricDefaultImplementation(e, "/trigger/{triggerID}/metrics", uriBuilderLocalVar.Path, triggerID, name);
                Events.ExecuteOnErrorDeleteTriggerMetric(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTriggerMetricApiResponse"/>
        /// </summary>
        public partial class DeleteTriggerMetricApiResponse : Moira.ApiClient.Client.ApiResponse, IDeleteTriggerMetricApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTriggerMetricApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTriggerMetricApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTriggerMetricApiResponse(ILogger<DeleteTriggerMetricApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Object result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteTriggerNodataMetrics(ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateDeleteTriggerNodataMetrics(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        private void AfterDeleteTriggerNodataMetricsDefaultImplementation(IDeleteTriggerNodataMetricsApiResponse apiResponseLocalVar, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTriggerNodataMetrics(ref suppressDefaultLog, apiResponseLocalVar, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void AfterDeleteTriggerNodataMetrics(ref bool suppressDefaultLog, IDeleteTriggerNodataMetricsApiResponse apiResponseLocalVar, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        private void OnErrorDeleteTriggerNodataMetricsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTriggerNodataMetrics(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorDeleteTriggerNodataMetrics(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID);

        /// <summary>
        /// Delete all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerNodataMetricsApiResponse"/>&gt;</returns>
        public async Task<IDeleteTriggerNodataMetricsApiResponse> DeleteTriggerNodataMetricsOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTriggerNodataMetricsAsync(triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Delete all metrics from last data which are in NODATA state. It also deletes all trigger patterns of those metrics 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerNodataMetricsApiResponse"/>&gt;</returns>
        public async Task<IDeleteTriggerNodataMetricsApiResponse> DeleteTriggerNodataMetricsAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteTriggerNodataMetrics(triggerID);

                FormatDeleteTriggerNodataMetrics(ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/metrics/nodata"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/metrics/nodata");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteTriggerNodataMetricsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTriggerNodataMetricsApiResponse>();

                        DeleteTriggerNodataMetricsApiResponse apiResponseLocalVar = new DeleteTriggerNodataMetricsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/metrics/nodata", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTriggerNodataMetricsDefaultImplementation(apiResponseLocalVar, triggerID);

                        Events.ExecuteOnDeleteTriggerNodataMetrics(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTriggerNodataMetricsDefaultImplementation(e, "/trigger/{triggerID}/metrics/nodata", uriBuilderLocalVar.Path, triggerID);
                Events.ExecuteOnErrorDeleteTriggerNodataMetrics(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTriggerNodataMetricsApiResponse"/>
        /// </summary>
        public partial class DeleteTriggerNodataMetricsApiResponse : Moira.ApiClient.Client.ApiResponse, IDeleteTriggerNodataMetricsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTriggerNodataMetricsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTriggerNodataMetricsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTriggerNodataMetricsApiResponse(ILogger<DeleteTriggerNodataMetricsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Object result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteTriggerThrottling(ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateDeleteTriggerThrottling(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        private void AfterDeleteTriggerThrottlingDefaultImplementation(IDeleteTriggerThrottlingApiResponse apiResponseLocalVar, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterDeleteTriggerThrottling(ref suppressDefaultLog, apiResponseLocalVar, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void AfterDeleteTriggerThrottling(ref bool suppressDefaultLog, IDeleteTriggerThrottlingApiResponse apiResponseLocalVar, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        private void OnErrorDeleteTriggerThrottlingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteTriggerThrottling(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorDeleteTriggerThrottling(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID);

        /// <summary>
        /// Deletes throttling for a trigger 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerThrottlingApiResponse"/>&gt;</returns>
        public async Task<IDeleteTriggerThrottlingApiResponse> DeleteTriggerThrottlingOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteTriggerThrottlingAsync(triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes throttling for a trigger 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteTriggerThrottlingApiResponse"/>&gt;</returns>
        public async Task<IDeleteTriggerThrottlingApiResponse> DeleteTriggerThrottlingAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeleteTriggerThrottling(triggerID);

                FormatDeleteTriggerThrottling(ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/throttling"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/throttling");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteTriggerThrottlingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteTriggerThrottlingApiResponse>();

                        DeleteTriggerThrottlingApiResponse apiResponseLocalVar = new DeleteTriggerThrottlingApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/throttling", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteTriggerThrottlingDefaultImplementation(apiResponseLocalVar, triggerID);

                        Events.ExecuteOnDeleteTriggerThrottling(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteTriggerThrottlingDefaultImplementation(e, "/trigger/{triggerID}/throttling", uriBuilderLocalVar.Path, triggerID);
                Events.ExecuteOnErrorDeleteTriggerThrottling(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteTriggerThrottlingApiResponse"/>
        /// </summary>
        public partial class DeleteTriggerThrottlingApiResponse : Moira.ApiClient.Client.ApiResponse, IDeleteTriggerThrottlingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteTriggerThrottlingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteTriggerThrottlingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteTriggerThrottlingApiResponse(ILogger<DeleteTriggerThrottlingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetAllTriggersDefaultImplementation(IGetAllTriggersApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetAllTriggers(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetAllTriggers(ref bool suppressDefaultLog, IGetAllTriggersApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetAllTriggersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllTriggers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetAllTriggers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get all triggers 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTriggersApiResponse"/>&gt;</returns>
        public async Task<IGetAllTriggersApiResponse> GetAllTriggersOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllTriggersAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all triggers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllTriggersApiResponse"/>&gt;</returns>
        public async Task<IGetAllTriggersApiResponse> GetAllTriggersAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetAllTriggersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllTriggersApiResponse>();

                        GetAllTriggersApiResponse apiResponseLocalVar = new GetAllTriggersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllTriggersDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetAllTriggers(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllTriggersDefaultImplementation(e, "/trigger", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetAllTriggers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllTriggersApiResponse"/>
        /// </summary>
        public partial class GetAllTriggersApiResponse : Moira.ApiClient.Client.ApiResponse, IGetAllTriggersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllTriggersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllTriggersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllTriggersApiResponse(ILogger<GetAllTriggersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggersList Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggersList>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggersList result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTrigger(ref string triggerID, ref Option<bool> populated);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateGetTrigger(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="populated"></param>
        private void AfterGetTriggerDefaultImplementation(IGetTriggerApiResponse apiResponseLocalVar, string triggerID, Option<bool> populated)
        {
            bool suppressDefaultLog = false;
            AfterGetTrigger(ref suppressDefaultLog, apiResponseLocalVar, triggerID, populated);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="populated"></param>
        partial void AfterGetTrigger(ref bool suppressDefaultLog, IGetTriggerApiResponse apiResponseLocalVar, string triggerID, Option<bool> populated);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="populated"></param>
        private void OnErrorGetTriggerDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<bool> populated)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTrigger(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID, populated);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="populated"></param>
        partial void OnErrorGetTrigger(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<bool> populated);

        /// <summary>
        /// Get an existing trigger 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="populated">Populated (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerApiResponse> GetTriggerOrDefaultAsync(string triggerID, Option<bool> populated = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTriggerAsync(triggerID, populated, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get an existing trigger 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="populated">Populated (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerApiResponse> GetTriggerAsync(string triggerID, Option<bool> populated = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTrigger(triggerID);

                FormatGetTrigger(ref triggerID, ref populated);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (populated.IsSet)
                        parseQueryStringLocalVar["populated"] = ClientUtils.ParameterToString(populated.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTriggerApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTriggerApiResponse>();

                        GetTriggerApiResponse apiResponseLocalVar = new GetTriggerApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTriggerDefaultImplementation(apiResponseLocalVar, triggerID, populated);

                        Events.ExecuteOnGetTrigger(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTriggerDefaultImplementation(e, "/trigger/{triggerID}", uriBuilderLocalVar.Path, triggerID, populated);
                Events.ExecuteOnErrorGetTrigger(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTriggerApiResponse"/>
        /// </summary>
        public partial class GetTriggerApiResponse : Moira.ApiClient.Client.ApiResponse, IGetTriggerApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTriggerApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTriggerApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTriggerApiResponse(ILogger<GetTriggerApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTrigger Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTrigger>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTrigger result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTriggerDump(ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateGetTriggerDump(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        private void AfterGetTriggerDumpDefaultImplementation(IGetTriggerDumpApiResponse apiResponseLocalVar, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterGetTriggerDump(ref suppressDefaultLog, apiResponseLocalVar, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void AfterGetTriggerDump(ref bool suppressDefaultLog, IGetTriggerDumpApiResponse apiResponseLocalVar, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        private void OnErrorGetTriggerDumpDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTriggerDump(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorGetTriggerDump(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID);

        /// <summary>
        /// Get trigger dump 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerDumpApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerDumpApiResponse> GetTriggerDumpOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTriggerDumpAsync(triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get trigger dump 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerDumpApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerDumpApiResponse> GetTriggerDumpAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTriggerDump(triggerID);

                FormatGetTriggerDump(ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/dump"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/dump");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTriggerDumpApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTriggerDumpApiResponse>();

                        GetTriggerDumpApiResponse apiResponseLocalVar = new GetTriggerDumpApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/dump", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTriggerDumpDefaultImplementation(apiResponseLocalVar, triggerID);

                        Events.ExecuteOnGetTriggerDump(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTriggerDumpDefaultImplementation(e, "/trigger/{triggerID}/dump", uriBuilderLocalVar.Path, triggerID);
                Events.ExecuteOnErrorGetTriggerDump(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTriggerDumpApiResponse"/>
        /// </summary>
        public partial class GetTriggerDumpApiResponse : Moira.ApiClient.Client.ApiResponse, IGetTriggerDumpApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTriggerDumpApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTriggerDumpApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTriggerDumpApiResponse(ILogger<GetTriggerDumpApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggerDump Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggerDump>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggerDump result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTriggerMetrics(ref string triggerID, ref Option<string> from, ref Option<string> to);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <returns></returns>
        private void ValidateGetTriggerMetrics(string triggerID, Option<string> from, Option<string> to)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        private void AfterGetTriggerMetricsDefaultImplementation(IGetTriggerMetricsApiResponse apiResponseLocalVar, string triggerID, Option<string> from, Option<string> to)
        {
            bool suppressDefaultLog = false;
            AfterGetTriggerMetrics(ref suppressDefaultLog, apiResponseLocalVar, triggerID, from, to);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        partial void AfterGetTriggerMetrics(ref bool suppressDefaultLog, IGetTriggerMetricsApiResponse apiResponseLocalVar, string triggerID, Option<string> from, Option<string> to);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        private void OnErrorGetTriggerMetricsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<string> from, Option<string> to)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTriggerMetrics(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID, from, to);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        partial void OnErrorGetTriggerMetrics(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<string> from, Option<string> to);

        /// <summary>
        /// Get metrics associated with certain trigger 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-10minutes&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerMetricsApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerMetricsApiResponse> GetTriggerMetricsOrDefaultAsync(string triggerID, Option<string> from = default, Option<string> to = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTriggerMetricsAsync(triggerID, from, to, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get metrics associated with certain trigger 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-10minutes&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerMetricsApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerMetricsApiResponse> GetTriggerMetricsAsync(string triggerID, Option<string> from = default, Option<string> to = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTriggerMetrics(triggerID, from, to);

                FormatGetTriggerMetrics(ref triggerID, ref from, ref to);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/metrics"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/metrics");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (from.IsSet)
                        parseQueryStringLocalVar["from"] = ClientUtils.ParameterToString(from.Value);

                    if (to.IsSet)
                        parseQueryStringLocalVar["to"] = ClientUtils.ParameterToString(to.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTriggerMetricsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTriggerMetricsApiResponse>();

                        GetTriggerMetricsApiResponse apiResponseLocalVar = new GetTriggerMetricsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/metrics", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTriggerMetricsDefaultImplementation(apiResponseLocalVar, triggerID, from, to);

                        Events.ExecuteOnGetTriggerMetrics(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTriggerMetricsDefaultImplementation(e, "/trigger/{triggerID}/metrics", uriBuilderLocalVar.Path, triggerID, from, to);
                Events.ExecuteOnErrorGetTriggerMetrics(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTriggerMetricsApiResponse"/>
        /// </summary>
        public partial class GetTriggerMetricsApiResponse : Moira.ApiClient.Client.ApiResponse, IGetTriggerMetricsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTriggerMetricsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTriggerMetricsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTriggerMetricsApiResponse(ILogger<GetTriggerMetricsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Dictionary<string, Dictionary<string, List<MoiraMetricValue>>> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, Dictionary<string, List<MoiraMetricValue>>>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Dictionary<string, Dictionary<string, List<MoiraMetricValue>>> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTriggerState(ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateGetTriggerState(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        private void AfterGetTriggerStateDefaultImplementation(IGetTriggerStateApiResponse apiResponseLocalVar, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterGetTriggerState(ref suppressDefaultLog, apiResponseLocalVar, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void AfterGetTriggerState(ref bool suppressDefaultLog, IGetTriggerStateApiResponse apiResponseLocalVar, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        private void OnErrorGetTriggerStateDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTriggerState(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorGetTriggerState(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID);

        /// <summary>
        /// Get the trigger state as at last check 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerStateApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerStateApiResponse> GetTriggerStateOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTriggerStateAsync(triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the trigger state as at last check 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerStateApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerStateApiResponse> GetTriggerStateAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTriggerState(triggerID);

                FormatGetTriggerState(ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/state"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/state");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTriggerStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTriggerStateApiResponse>();

                        GetTriggerStateApiResponse apiResponseLocalVar = new GetTriggerStateApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/state", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTriggerStateDefaultImplementation(apiResponseLocalVar, triggerID);

                        Events.ExecuteOnGetTriggerState(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTriggerStateDefaultImplementation(e, "/trigger/{triggerID}/state", uriBuilderLocalVar.Path, triggerID);
                Events.ExecuteOnErrorGetTriggerState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTriggerStateApiResponse"/>
        /// </summary>
        public partial class GetTriggerStateApiResponse : Moira.ApiClient.Client.ApiResponse, IGetTriggerStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTriggerStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTriggerStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTriggerStateApiResponse(ILogger<GetTriggerStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggerCheck Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggerCheck>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggerCheck result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTriggerThrottling(ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateGetTriggerThrottling(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        private void AfterGetTriggerThrottlingDefaultImplementation(IGetTriggerThrottlingApiResponse apiResponseLocalVar, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterGetTriggerThrottling(ref suppressDefaultLog, apiResponseLocalVar, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void AfterGetTriggerThrottling(ref bool suppressDefaultLog, IGetTriggerThrottlingApiResponse apiResponseLocalVar, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        private void OnErrorGetTriggerThrottlingDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTriggerThrottling(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorGetTriggerThrottling(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID);

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerThrottlingApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerThrottlingApiResponse> GetTriggerThrottlingOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTriggerThrottlingAsync(triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a trigger with its throttling i.e its next allowed message time 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggerThrottlingApiResponse"/>&gt;</returns>
        public async Task<IGetTriggerThrottlingApiResponse> GetTriggerThrottlingAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTriggerThrottling(triggerID);

                FormatGetTriggerThrottling(ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/throttling"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/throttling");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTriggerThrottlingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTriggerThrottlingApiResponse>();

                        GetTriggerThrottlingApiResponse apiResponseLocalVar = new GetTriggerThrottlingApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/throttling", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTriggerThrottlingDefaultImplementation(apiResponseLocalVar, triggerID);

                        Events.ExecuteOnGetTriggerThrottling(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTriggerThrottlingDefaultImplementation(e, "/trigger/{triggerID}/throttling", uriBuilderLocalVar.Path, triggerID);
                Events.ExecuteOnErrorGetTriggerThrottling(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTriggerThrottlingApiResponse"/>
        /// </summary>
        public partial class GetTriggerThrottlingApiResponse : Moira.ApiClient.Client.ApiResponse, IGetTriggerThrottlingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTriggerThrottlingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTriggerThrottlingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTriggerThrottlingApiResponse(ILogger<GetTriggerThrottlingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoThrottlingResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoThrottlingResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoThrottlingResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTriggersNoisiness(ref Option<int> size, ref Option<int> p, ref Option<string> from, ref Option<string> to, ref Option<string> sort);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetTriggersNoisiness(Option<string> from, Option<string> to, Option<string> sort)
        {
            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="sort"></param>
        private void AfterGetTriggersNoisinessDefaultImplementation(IGetTriggersNoisinessApiResponse apiResponseLocalVar, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> sort)
        {
            bool suppressDefaultLog = false;
            AfterGetTriggersNoisiness(ref suppressDefaultLog, apiResponseLocalVar, size, p, from, to, sort);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="sort"></param>
        partial void AfterGetTriggersNoisiness(ref bool suppressDefaultLog, IGetTriggersNoisinessApiResponse apiResponseLocalVar, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> sort);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="sort"></param>
        private void OnErrorGetTriggersNoisinessDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> sort)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetTriggersNoisiness(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, size, p, from, to, sort);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="sort"></param>
        partial void OnErrorGetTriggersNoisiness(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> sort);

        /// <summary>
        /// Get triggers noisiness 
        /// </summary>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="sort">String to set sort order (by events_count). On empty - no order, asc - ascending, desc - descending (optional, default to &quot;desc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggersNoisinessApiResponse"/>&gt;</returns>
        public async Task<IGetTriggersNoisinessApiResponse> GetTriggersNoisinessOrDefaultAsync(Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTriggersNoisinessAsync(size, p, from, to, sort, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get triggers noisiness 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="sort">String to set sort order (by events_count). On empty - no order, asc - ascending, desc - descending (optional, default to &quot;desc&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTriggersNoisinessApiResponse"/>&gt;</returns>
        public async Task<IGetTriggersNoisinessApiResponse> GetTriggersNoisinessAsync(Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> sort = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTriggersNoisiness(from, to, sort);

                FormatGetTriggersNoisiness(ref size, ref p, ref from, ref to, ref sort);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/noisiness"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/noisiness");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (p.IsSet)
                        parseQueryStringLocalVar["p"] = ClientUtils.ParameterToString(p.Value);

                    if (from.IsSet)
                        parseQueryStringLocalVar["from"] = ClientUtils.ParameterToString(from.Value);

                    if (to.IsSet)
                        parseQueryStringLocalVar["to"] = ClientUtils.ParameterToString(to.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetTriggersNoisinessApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTriggersNoisinessApiResponse>();

                        GetTriggersNoisinessApiResponse apiResponseLocalVar = new GetTriggersNoisinessApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/noisiness", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTriggersNoisinessDefaultImplementation(apiResponseLocalVar, size, p, from, to, sort);

                        Events.ExecuteOnGetTriggersNoisiness(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTriggersNoisinessDefaultImplementation(e, "/trigger/noisiness", uriBuilderLocalVar.Path, size, p, from, to, sort);
                Events.ExecuteOnErrorGetTriggersNoisiness(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTriggersNoisinessApiResponse"/>
        /// </summary>
        public partial class GetTriggersNoisinessApiResponse : Moira.ApiClient.Client.ApiResponse, IGetTriggersNoisinessApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTriggersNoisinessApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTriggersNoisinessApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTriggersNoisinessApiResponse(ILogger<GetTriggersNoisinessApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggerNoisinessList Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggerNoisinessList>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggerNoisinessList result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUnusedTriggersDefaultImplementation(IGetUnusedTriggersApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUnusedTriggers(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUnusedTriggers(ref bool suppressDefaultLog, IGetUnusedTriggersApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetUnusedTriggersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUnusedTriggers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetUnusedTriggers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Get unused triggers 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnusedTriggersApiResponse"/>&gt;</returns>
        public async Task<IGetUnusedTriggersApiResponse> GetUnusedTriggersOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUnusedTriggersAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get unused triggers 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUnusedTriggersApiResponse"/>&gt;</returns>
        public async Task<IGetUnusedTriggersApiResponse> GetUnusedTriggersAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/unused"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/unused");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetUnusedTriggersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUnusedTriggersApiResponse>();

                        GetUnusedTriggersApiResponse apiResponseLocalVar = new GetUnusedTriggersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/unused", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUnusedTriggersDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUnusedTriggers(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUnusedTriggersDefaultImplementation(e, "/trigger/unused", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUnusedTriggers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUnusedTriggersApiResponse"/>
        /// </summary>
        public partial class GetUnusedTriggersApiResponse : Moira.ApiClient.Client.ApiResponse, IGetUnusedTriggersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUnusedTriggersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUnusedTriggersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUnusedTriggersApiResponse(ILogger<GetUnusedTriggersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggersList Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggersList>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggersList result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveTrigger(ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateRemoveTrigger(string triggerID)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        private void AfterRemoveTriggerDefaultImplementation(IRemoveTriggerApiResponse apiResponseLocalVar, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterRemoveTrigger(ref suppressDefaultLog, apiResponseLocalVar, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void AfterRemoveTrigger(ref bool suppressDefaultLog, IRemoveTriggerApiResponse apiResponseLocalVar, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        private void OnErrorRemoveTriggerDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRemoveTrigger(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorRemoveTrigger(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID);

        /// <summary>
        /// Remove trigger 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveTriggerApiResponse"/>&gt;</returns>
        public async Task<IRemoveTriggerApiResponse> RemoveTriggerOrDefaultAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveTriggerAsync(triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Remove trigger 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveTriggerApiResponse"/>&gt;</returns>
        public async Task<IRemoveTriggerApiResponse> RemoveTriggerAsync(string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRemoveTrigger(triggerID);

                FormatRemoveTrigger(ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RemoveTriggerApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveTriggerApiResponse>();

                        RemoveTriggerApiResponse apiResponseLocalVar = new RemoveTriggerApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveTriggerDefaultImplementation(apiResponseLocalVar, triggerID);

                        Events.ExecuteOnRemoveTrigger(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveTriggerDefaultImplementation(e, "/trigger/{triggerID}", uriBuilderLocalVar.Path, triggerID);
                Events.ExecuteOnErrorRemoveTrigger(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveTriggerApiResponse"/>
        /// </summary>
        public partial class RemoveTriggerApiResponse : Moira.ApiClient.Client.ApiResponse, IRemoveTriggerApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveTriggerApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveTriggerApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveTriggerApiResponse(ILogger<RemoveTriggerApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRenderTriggerMetrics(ref string triggerID, ref Option<string> target, ref Option<string> from, ref Option<string> to, ref Option<string> timezone, ref Option<string> theme, ref Option<bool> realtime);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <param name="target"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="timezone"></param>
        /// <param name="theme"></param>
        /// <returns></returns>
        private void ValidateRenderTriggerMetrics(string triggerID, Option<string> target, Option<string> from, Option<string> to, Option<string> timezone, Option<string> theme)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target));

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to));

            if (timezone.IsSet && timezone.Value == null)
                throw new ArgumentNullException(nameof(timezone));

            if (theme.IsSet && theme.Value == null)
                throw new ArgumentNullException(nameof(theme));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="target"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="timezone"></param>
        /// <param name="theme"></param>
        /// <param name="realtime"></param>
        private void AfterRenderTriggerMetricsDefaultImplementation(IRenderTriggerMetricsApiResponse apiResponseLocalVar, string triggerID, Option<string> target, Option<string> from, Option<string> to, Option<string> timezone, Option<string> theme, Option<bool> realtime)
        {
            bool suppressDefaultLog = false;
            AfterRenderTriggerMetrics(ref suppressDefaultLog, apiResponseLocalVar, triggerID, target, from, to, timezone, theme, realtime);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="target"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="timezone"></param>
        /// <param name="theme"></param>
        /// <param name="realtime"></param>
        partial void AfterRenderTriggerMetrics(ref bool suppressDefaultLog, IRenderTriggerMetricsApiResponse apiResponseLocalVar, string triggerID, Option<string> target, Option<string> from, Option<string> to, Option<string> timezone, Option<string> theme, Option<bool> realtime);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="target"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="timezone"></param>
        /// <param name="theme"></param>
        /// <param name="realtime"></param>
        private void OnErrorRenderTriggerMetricsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<string> target, Option<string> from, Option<string> to, Option<string> timezone, Option<string> theme, Option<bool> realtime)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRenderTriggerMetrics(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID, target, from, to, timezone, theme, realtime);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="target"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="timezone"></param>
        /// <param name="theme"></param>
        /// <param name="realtime"></param>
        partial void OnErrorRenderTriggerMetrics(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<string> target, Option<string> from, Option<string> to, Option<string> timezone, Option<string> theme, Option<bool> realtime);

        /// <summary>
        /// Render trigger metrics plot 
        /// </summary>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="target">Target metric name (optional, default to &quot;t1&quot;)</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-1hour&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="timezone">Timezone for rendering (optional, default to &quot;UTC&quot;)</param>
        /// <param name="theme">Plot theme (optional, default to &quot;light&quot;)</param>
        /// <param name="realtime">Fetch real-time data (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenderTriggerMetricsApiResponse"/>&gt;</returns>
        public async Task<IRenderTriggerMetricsApiResponse> RenderTriggerMetricsOrDefaultAsync(string triggerID, Option<string> target = default, Option<string> from = default, Option<string> to = default, Option<string> timezone = default, Option<string> theme = default, Option<bool> realtime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RenderTriggerMetricsAsync(triggerID, target, from, to, timezone, theme, realtime, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Render trigger metrics plot 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="target">Target metric name (optional, default to &quot;t1&quot;)</param>
        /// <param name="from">Start time for metrics retrieval (optional, default to &quot;-1hour&quot;)</param>
        /// <param name="to">End time for metrics retrieval (optional, default to &quot;now&quot;)</param>
        /// <param name="timezone">Timezone for rendering (optional, default to &quot;UTC&quot;)</param>
        /// <param name="theme">Plot theme (optional, default to &quot;light&quot;)</param>
        /// <param name="realtime">Fetch real-time data (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRenderTriggerMetricsApiResponse"/>&gt;</returns>
        public async Task<IRenderTriggerMetricsApiResponse> RenderTriggerMetricsAsync(string triggerID, Option<string> target = default, Option<string> from = default, Option<string> to = default, Option<string> timezone = default, Option<string> theme = default, Option<bool> realtime = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRenderTriggerMetrics(triggerID, target, from, to, timezone, theme);

                FormatRenderTriggerMetrics(ref triggerID, ref target, ref from, ref to, ref timezone, ref theme, ref realtime);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/render"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/render");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (target.IsSet)
                        parseQueryStringLocalVar["target"] = ClientUtils.ParameterToString(target.Value);

                    if (from.IsSet)
                        parseQueryStringLocalVar["from"] = ClientUtils.ParameterToString(from.Value);

                    if (to.IsSet)
                        parseQueryStringLocalVar["to"] = ClientUtils.ParameterToString(to.Value);

                    if (timezone.IsSet)
                        parseQueryStringLocalVar["timezone"] = ClientUtils.ParameterToString(timezone.Value);

                    if (theme.IsSet)
                        parseQueryStringLocalVar["theme"] = ClientUtils.ParameterToString(theme.Value);

                    if (realtime.IsSet)
                        parseQueryStringLocalVar["realtime"] = ClientUtils.ParameterToString(realtime.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "image/png",
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<RenderTriggerMetricsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RenderTriggerMetricsApiResponse>();

                        RenderTriggerMetricsApiResponse apiResponseLocalVar = new RenderTriggerMetricsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/render", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRenderTriggerMetricsDefaultImplementation(apiResponseLocalVar, triggerID, target, from, to, timezone, theme, realtime);

                        Events.ExecuteOnRenderTriggerMetrics(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRenderTriggerMetricsDefaultImplementation(e, "/trigger/{triggerID}/render", uriBuilderLocalVar.Path, triggerID, target, from, to, timezone, theme, realtime);
                Events.ExecuteOnErrorRenderTriggerMetrics(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RenderTriggerMetricsApiResponse"/>
        /// </summary>
        public partial class RenderTriggerMetricsApiResponse : Moira.ApiClient.Client.ApiResponse, IRenderTriggerMetricsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RenderTriggerMetricsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RenderTriggerMetricsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RenderTriggerMetricsApiResponse(ILogger<RenderTriggerMetricsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out System.IO.Stream result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchTriggers(ref Option<bool> onlyProblems, ref Option<string> text, ref Option<int> p, ref Option<int> size, Option<List<string>> tags, ref Option<bool> createPager, ref Option<string> pagerID, ref Option<string> createdBy);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="text"></param>
        /// <param name="tags"></param>
        /// <param name="pagerID"></param>
        /// <param name="createdBy"></param>
        /// <returns></returns>
        private void ValidateSearchTriggers(Option<string> text, Option<List<string>> tags, Option<string> pagerID, Option<string> createdBy)
        {
            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text));

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags));

            if (pagerID.IsSet && pagerID.Value == null)
                throw new ArgumentNullException(nameof(pagerID));

            if (createdBy.IsSet && createdBy.Value == null)
                throw new ArgumentNullException(nameof(createdBy));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="onlyProblems"></param>
        /// <param name="text"></param>
        /// <param name="p"></param>
        /// <param name="size"></param>
        /// <param name="tags"></param>
        /// <param name="createPager"></param>
        /// <param name="pagerID"></param>
        /// <param name="createdBy"></param>
        private void AfterSearchTriggersDefaultImplementation(ISearchTriggersApiResponse apiResponseLocalVar, Option<bool> onlyProblems, Option<string> text, Option<int> p, Option<int> size, Option<List<string>> tags, Option<bool> createPager, Option<string> pagerID, Option<string> createdBy)
        {
            bool suppressDefaultLog = false;
            AfterSearchTriggers(ref suppressDefaultLog, apiResponseLocalVar, onlyProblems, text, p, size, tags, createPager, pagerID, createdBy);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="onlyProblems"></param>
        /// <param name="text"></param>
        /// <param name="p"></param>
        /// <param name="size"></param>
        /// <param name="tags"></param>
        /// <param name="createPager"></param>
        /// <param name="pagerID"></param>
        /// <param name="createdBy"></param>
        partial void AfterSearchTriggers(ref bool suppressDefaultLog, ISearchTriggersApiResponse apiResponseLocalVar, Option<bool> onlyProblems, Option<string> text, Option<int> p, Option<int> size, Option<List<string>> tags, Option<bool> createPager, Option<string> pagerID, Option<string> createdBy);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="onlyProblems"></param>
        /// <param name="text"></param>
        /// <param name="p"></param>
        /// <param name="size"></param>
        /// <param name="tags"></param>
        /// <param name="createPager"></param>
        /// <param name="pagerID"></param>
        /// <param name="createdBy"></param>
        private void OnErrorSearchTriggersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> onlyProblems, Option<string> text, Option<int> p, Option<int> size, Option<List<string>> tags, Option<bool> createPager, Option<string> pagerID, Option<string> createdBy)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchTriggers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, onlyProblems, text, p, size, tags, createPager, pagerID, createdBy);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="onlyProblems"></param>
        /// <param name="text"></param>
        /// <param name="p"></param>
        /// <param name="size"></param>
        /// <param name="tags"></param>
        /// <param name="createPager"></param>
        /// <param name="pagerID"></param>
        /// <param name="createdBy"></param>
        partial void OnErrorSearchTriggers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<bool> onlyProblems, Option<string> text, Option<int> p, Option<int> size, Option<List<string>> tags, Option<bool> createPager, Option<string> pagerID, Option<string> createdBy);

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path You can also add filtering by tags, for this purpose add query parameters tags[0]&#x3D;test, tags[1]&#x3D;test1 and so on For example, &#x60;/api/trigger/search?tags[0]&#x3D;test&amp;tags[1]&#x3D;test1&#x60;
        /// </summary>
        /// <param name="onlyProblems">Only include problems (optional, default to false)</param>
        /// <param name="text">Search text (optional, default to &quot;cpu&quot;)</param>
        /// <param name="p">Page number (optional, default to 0)</param>
        /// <param name="size">Page size (optional, default to 10)</param>
        /// <param name="tags">Search tag (optional)</param>
        /// <param name="createPager">Create pager (optional, default to false)</param>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="createdBy">Created By (optional, default to &quot;moira.team&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchTriggersApiResponse"/>&gt;</returns>
        public async Task<ISearchTriggersApiResponse> SearchTriggersOrDefaultAsync(Option<bool> onlyProblems = default, Option<string> text = default, Option<int> p = default, Option<int> size = default, Option<List<string>> tags = default, Option<bool> createPager = default, Option<string> pagerID = default, Option<string> createdBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchTriggersAsync(onlyProblems, text, p, size, tags, createPager, pagerID, createdBy, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Search triggers. Replaces the deprecated &#x60;page&#x60; path You can also add filtering by tags, for this purpose add query parameters tags[0]&#x3D;test, tags[1]&#x3D;test1 and so on For example, &#x60;/api/trigger/search?tags[0]&#x3D;test&amp;tags[1]&#x3D;test1&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="onlyProblems">Only include problems (optional, default to false)</param>
        /// <param name="text">Search text (optional, default to &quot;cpu&quot;)</param>
        /// <param name="p">Page number (optional, default to 0)</param>
        /// <param name="size">Page size (optional, default to 10)</param>
        /// <param name="tags">Search tag (optional)</param>
        /// <param name="createPager">Create pager (optional, default to false)</param>
        /// <param name="pagerID">Pager ID (optional, default to &quot;bcba82f5-48cf-44c0-b7d6-e1d32c64a88c&quot;)</param>
        /// <param name="createdBy">Created By (optional, default to &quot;moira.team&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchTriggersApiResponse"/>&gt;</returns>
        public async Task<ISearchTriggersApiResponse> SearchTriggersAsync(Option<bool> onlyProblems = default, Option<string> text = default, Option<int> p = default, Option<int> size = default, Option<List<string>> tags = default, Option<bool> createPager = default, Option<string> pagerID = default, Option<string> createdBy = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchTriggers(text, tags, pagerID, createdBy);

                FormatSearchTriggers(ref onlyProblems, ref text, ref p, ref size, tags, ref createPager, ref pagerID, ref createdBy);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/search"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/search");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (onlyProblems.IsSet)
                        parseQueryStringLocalVar["onlyProblems"] = ClientUtils.ParameterToString(onlyProblems.Value);

                    if (text.IsSet)
                        parseQueryStringLocalVar["text"] = ClientUtils.ParameterToString(text.Value);

                    if (p.IsSet)
                        parseQueryStringLocalVar["p"] = ClientUtils.ParameterToString(p.Value);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (tags.IsSet)
                        parseQueryStringLocalVar["tags"] = ClientUtils.ParameterToString(tags.Value);

                    if (createPager.IsSet)
                        parseQueryStringLocalVar["createPager"] = ClientUtils.ParameterToString(createPager.Value);

                    if (pagerID.IsSet)
                        parseQueryStringLocalVar["pagerID"] = ClientUtils.ParameterToString(pagerID.Value);

                    if (createdBy.IsSet)
                        parseQueryStringLocalVar["createdBy"] = ClientUtils.ParameterToString(createdBy.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SearchTriggersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchTriggersApiResponse>();

                        SearchTriggersApiResponse apiResponseLocalVar = new SearchTriggersApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/search", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchTriggersDefaultImplementation(apiResponseLocalVar, onlyProblems, text, p, size, tags, createPager, pagerID, createdBy);

                        Events.ExecuteOnSearchTriggers(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchTriggersDefaultImplementation(e, "/trigger/search", uriBuilderLocalVar.Path, onlyProblems, text, p, size, tags, createPager, pagerID, createdBy);
                Events.ExecuteOnErrorSearchTriggers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchTriggersApiResponse"/>
        /// </summary>
        public partial class SearchTriggersApiResponse : Moira.ApiClient.Client.ApiResponse, ISearchTriggersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchTriggersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchTriggersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchTriggersApiResponse(ILogger<SearchTriggersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggersList Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggersList>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggersList result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetTriggerMaintenance(DtoTriggerMaintenance dtoTriggerMaintenance, ref string triggerID);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateSetTriggerMaintenance(DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID)
        {
            if (dtoTriggerMaintenance == null)
                throw new ArgumentNullException(nameof(dtoTriggerMaintenance));

            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="triggerID"></param>
        private void AfterSetTriggerMaintenanceDefaultImplementation(ISetTriggerMaintenanceApiResponse apiResponseLocalVar, DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID)
        {
            bool suppressDefaultLog = false;
            AfterSetTriggerMaintenance(ref suppressDefaultLog, apiResponseLocalVar, dtoTriggerMaintenance, triggerID);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="triggerID"></param>
        partial void AfterSetTriggerMaintenance(ref bool suppressDefaultLog, ISetTriggerMaintenanceApiResponse apiResponseLocalVar, DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="triggerID"></param>
        private void OnErrorSetTriggerMaintenanceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSetTriggerMaintenance(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dtoTriggerMaintenance, triggerID);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="triggerID"></param>
        partial void OnErrorSetTriggerMaintenance(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID);

        /// <summary>
        /// Set metrics and the trigger itself to maintenance mode 
        /// </summary>
        /// <param name="dtoTriggerMaintenance">Maintenance data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetTriggerMaintenanceApiResponse"/>&gt;</returns>
        public async Task<ISetTriggerMaintenanceApiResponse> SetTriggerMaintenanceOrDefaultAsync(DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetTriggerMaintenanceAsync(dtoTriggerMaintenance, triggerID, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Set metrics and the trigger itself to maintenance mode 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTriggerMaintenance">Maintenance data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetTriggerMaintenanceApiResponse"/>&gt;</returns>
        public async Task<ISetTriggerMaintenanceApiResponse> SetTriggerMaintenanceAsync(DtoTriggerMaintenance dtoTriggerMaintenance, string triggerID, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetTriggerMaintenance(dtoTriggerMaintenance, triggerID);

                FormatSetTriggerMaintenance(dtoTriggerMaintenance, ref triggerID);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}/setMaintenance"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}/setMaintenance");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    httpRequestMessageLocalVar.Content = (dtoTriggerMaintenance as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(dtoTriggerMaintenance, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<SetTriggerMaintenanceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetTriggerMaintenanceApiResponse>();

                        SetTriggerMaintenanceApiResponse apiResponseLocalVar = new SetTriggerMaintenanceApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}/setMaintenance", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetTriggerMaintenanceDefaultImplementation(apiResponseLocalVar, dtoTriggerMaintenance, triggerID);

                        Events.ExecuteOnSetTriggerMaintenance(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetTriggerMaintenanceDefaultImplementation(e, "/trigger/{triggerID}/setMaintenance", uriBuilderLocalVar.Path, dtoTriggerMaintenance, triggerID);
                Events.ExecuteOnErrorSetTriggerMaintenance(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetTriggerMaintenanceApiResponse"/>
        /// </summary>
        public partial class SetTriggerMaintenanceApiResponse : Moira.ApiClient.Client.ApiResponse, ISetTriggerMaintenanceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetTriggerMaintenanceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetTriggerMaintenanceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetTriggerMaintenanceApiResponse(ILogger<SetTriggerMaintenanceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Object result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTriggerCheck(DtoTrigger dtoTrigger);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dtoTrigger"></param>
        /// <returns></returns>
        private void ValidateTriggerCheck(DtoTrigger dtoTrigger)
        {
            if (dtoTrigger == null)
                throw new ArgumentNullException(nameof(dtoTrigger));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        private void AfterTriggerCheckDefaultImplementation(ITriggerCheckApiResponse apiResponseLocalVar, DtoTrigger dtoTrigger)
        {
            bool suppressDefaultLog = false;
            AfterTriggerCheck(ref suppressDefaultLog, apiResponseLocalVar, dtoTrigger);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        partial void AfterTriggerCheck(ref bool suppressDefaultLog, ITriggerCheckApiResponse apiResponseLocalVar, DtoTrigger dtoTrigger);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        private void OnErrorTriggerCheckDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTrigger dtoTrigger)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTriggerCheck(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dtoTrigger);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        partial void OnErrorTriggerCheck(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTrigger dtoTrigger);

        /// <summary>
        /// Validates trigger target 
        /// </summary>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITriggerCheckApiResponse"/>&gt;</returns>
        public async Task<ITriggerCheckApiResponse> TriggerCheckOrDefaultAsync(DtoTrigger dtoTrigger, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TriggerCheckAsync(dtoTrigger, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Validates trigger target 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITriggerCheckApiResponse"/>&gt;</returns>
        public async Task<ITriggerCheckApiResponse> TriggerCheckAsync(DtoTrigger dtoTrigger, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTriggerCheck(dtoTrigger);

                FormatTriggerCheck(dtoTrigger);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/check"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/check");

                    httpRequestMessageLocalVar.Content = (dtoTrigger as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(dtoTrigger, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<TriggerCheckApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TriggerCheckApiResponse>();

                        TriggerCheckApiResponse apiResponseLocalVar = new TriggerCheckApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/check", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTriggerCheckDefaultImplementation(apiResponseLocalVar, dtoTrigger);

                        Events.ExecuteOnTriggerCheck(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTriggerCheckDefaultImplementation(e, "/trigger/check", uriBuilderLocalVar.Path, dtoTrigger);
                Events.ExecuteOnErrorTriggerCheck(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TriggerCheckApiResponse"/>
        /// </summary>
        public partial class TriggerCheckApiResponse : Moira.ApiClient.Client.ApiResponse, ITriggerCheckApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TriggerCheckApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TriggerCheckApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TriggerCheckApiResponse(ILogger<TriggerCheckApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoTriggerCheckResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoTriggerCheckResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoTriggerCheckResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public bool IsServiceUnavailable => 503 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse ServiceUnavailable()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsServiceUnavailable
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryServiceUnavailable(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = ServiceUnavailable();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)503);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateTrigger(DtoTrigger dtoTrigger, ref string triggerID, ref Option<bool> validate);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="dtoTrigger"></param>
        /// <param name="triggerID"></param>
        /// <returns></returns>
        private void ValidateUpdateTrigger(DtoTrigger dtoTrigger, string triggerID)
        {
            if (dtoTrigger == null)
                throw new ArgumentNullException(nameof(dtoTrigger));

            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="triggerID"></param>
        /// <param name="validate"></param>
        private void AfterUpdateTriggerDefaultImplementation(IUpdateTriggerApiResponse apiResponseLocalVar, DtoTrigger dtoTrigger, string triggerID, Option<bool> validate)
        {
            bool suppressDefaultLog = false;
            AfterUpdateTrigger(ref suppressDefaultLog, apiResponseLocalVar, dtoTrigger, triggerID, validate);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="triggerID"></param>
        /// <param name="validate"></param>
        partial void AfterUpdateTrigger(ref bool suppressDefaultLog, IUpdateTriggerApiResponse apiResponseLocalVar, DtoTrigger dtoTrigger, string triggerID, Option<bool> validate);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="triggerID"></param>
        /// <param name="validate"></param>
        private void OnErrorUpdateTriggerDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTrigger dtoTrigger, string triggerID, Option<bool> validate)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateTrigger(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, dtoTrigger, triggerID, validate);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="dtoTrigger"></param>
        /// <param name="triggerID"></param>
        /// <param name="validate"></param>
        partial void OnErrorUpdateTrigger(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, DtoTrigger dtoTrigger, string triggerID, Option<bool> validate);

        /// <summary>
        /// Update existing trigger 
        /// </summary>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTriggerApiResponse"/>&gt;</returns>
        public async Task<IUpdateTriggerApiResponse> UpdateTriggerOrDefaultAsync(DtoTrigger dtoTrigger, string triggerID, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateTriggerAsync(dtoTrigger, triggerID, validate, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update existing trigger 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtoTrigger">Trigger data</param>
        /// <param name="triggerID">Trigger ID</param>
        /// <param name="validate">For validating targets (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateTriggerApiResponse"/>&gt;</returns>
        public async Task<IUpdateTriggerApiResponse> UpdateTriggerAsync(DtoTrigger dtoTrigger, string triggerID, Option<bool> validate = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateTrigger(dtoTrigger, triggerID);

                FormatUpdateTrigger(dtoTrigger, ref triggerID, ref validate);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/trigger/{triggerID}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/trigger/{triggerID}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (validate.IsSet)
                        parseQueryStringLocalVar["validate"] = ClientUtils.ParameterToString(validate.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (dtoTrigger as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(dtoTrigger, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<UpdateTriggerApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateTriggerApiResponse>();

                        UpdateTriggerApiResponse apiResponseLocalVar = new UpdateTriggerApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/trigger/{triggerID}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateTriggerDefaultImplementation(apiResponseLocalVar, dtoTrigger, triggerID, validate);

                        Events.ExecuteOnUpdateTrigger(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateTriggerDefaultImplementation(e, "/trigger/{triggerID}", uriBuilderLocalVar.Path, dtoTrigger, triggerID, validate);
                Events.ExecuteOnErrorUpdateTrigger(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateTriggerApiResponse"/>
        /// </summary>
        public partial class UpdateTriggerApiResponse : Moira.ApiClient.Client.ApiResponse, IUpdateTriggerApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateTriggerApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateTriggerApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateTriggerApiResponse(ILogger<UpdateTriggerApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoSaveTriggerResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoSaveTriggerResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoSaveTriggerResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public bool IsServiceUnavailable => 503 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse ServiceUnavailable()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsServiceUnavailable
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryServiceUnavailable(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = ServiceUnavailable();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)503);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
