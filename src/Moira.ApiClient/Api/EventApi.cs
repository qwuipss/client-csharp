// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Moira.ApiClient.Client;
using Moira.ApiClient.Model;

namespace Moira.ApiClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEventApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EventApiEvents Events { get; }

        /// <summary>
        /// Deletes all notification events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllEventsApiResponse"/>&gt;</returns>
        Task<IDeleteAllEventsApiResponse> DeleteAllEventsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes all notification events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllEventsApiResponse"/>&gt;</returns>
        Task<IDeleteAllEventsApiResponse> DeleteAllEventsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all trigger events for current page and their count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="metric">Regular expression that will be used to filter events (optional, default to &quot;.*&quot;)</param>
        /// <param name="states">String of &#39;,&#39; separated state names. If empty then all states will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEventsListApiResponse"/>&gt;</returns>
        Task<IGetEventsListApiResponse> GetEventsListAsync(string triggerID, Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> metric = default, Option<List<string>> states = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Gets all trigger events for current page and their count
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="metric">Regular expression that will be used to filter events (optional, default to &quot;.*&quot;)</param>
        /// <param name="states">String of &#39;,&#39; separated state names. If empty then all states will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEventsListApiResponse"/>&gt;</returns>
        Task<IGetEventsListApiResponse> GetEventsListOrDefaultAsync(string triggerID, Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> metric = default, Option<List<string>> states = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteAllEventsApiResponse"/>
    /// </summary>
    public interface IDeleteAllEventsApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Object>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetEventsListApiResponse"/>
    /// </summary>
    public interface IGetEventsListApiResponse : Moira.ApiClient.Client.IApiResponse, IOk<Moira.ApiClient.Model.DtoEventsList>, IBadRequest<Moira.ApiClient.Model.ApiErrorResponse>, INotFound<Moira.ApiClient.Model.ApiErrorResponse>, IUnprocessableContent<Moira.ApiClient.Model.ApiErrorResponse>, IInternalServerError<Moira.ApiClient.Model.ApiErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EventApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeleteAllEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeleteAllEvents;

        internal void ExecuteOnDeleteAllEvents(EventApi.DeleteAllEventsApiResponse apiResponse)
        {
            OnDeleteAllEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteAllEvents(Exception exception)
        {
            OnErrorDeleteAllEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetEventsList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetEventsList;

        internal void ExecuteOnGetEventsList(EventApi.GetEventsListApiResponse apiResponse)
        {
            OnGetEventsList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetEventsList(Exception exception)
        {
            OnErrorGetEventsList?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EventApi : IEventApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EventApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EventApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventApi(ILogger<EventApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EventApiEvents eventApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EventApi>();
            HttpClient = httpClient;
            Events = eventApiEvents;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterDeleteAllEventsDefaultImplementation(IDeleteAllEventsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterDeleteAllEvents(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterDeleteAllEvents(ref bool suppressDefaultLog, IDeleteAllEventsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorDeleteAllEventsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeleteAllEvents(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorDeleteAllEvents(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        /// Deletes all notification events 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllEventsApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllEventsApiResponse> DeleteAllEventsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteAllEventsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes all notification events 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteAllEventsApiResponse"/>&gt;</returns>
        public async Task<IDeleteAllEventsApiResponse> DeleteAllEventsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/event/all"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/event/all");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<DeleteAllEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteAllEventsApiResponse>();

                        DeleteAllEventsApiResponse apiResponseLocalVar = new DeleteAllEventsApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/event/all", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteAllEventsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnDeleteAllEvents(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteAllEventsDefaultImplementation(e, "/event/all", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorDeleteAllEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteAllEventsApiResponse"/>
        /// </summary>
        public partial class DeleteAllEventsApiResponse : Moira.ApiClient.Client.ApiResponse, IDeleteAllEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteAllEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteAllEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteAllEventsApiResponse(ILogger<DeleteAllEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Object Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Object>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Object result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetEventsList(ref string triggerID, ref Option<int> size, ref Option<int> p, ref Option<string> from, ref Option<string> to, ref Option<string> metric, Option<List<string>> states);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="triggerID"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="metric"></param>
        /// <param name="states"></param>
        /// <returns></returns>
        private void ValidateGetEventsList(string triggerID, Option<string> from, Option<string> to, Option<string> metric, Option<List<string>> states)
        {
            if (triggerID == null)
                throw new ArgumentNullException(nameof(triggerID));

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from));

            if (to.IsSet && to.Value == null)
                throw new ArgumentNullException(nameof(to));

            if (metric.IsSet && metric.Value == null)
                throw new ArgumentNullException(nameof(metric));

            if (states.IsSet && states.Value == null)
                throw new ArgumentNullException(nameof(states));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="metric"></param>
        /// <param name="states"></param>
        private void AfterGetEventsListDefaultImplementation(IGetEventsListApiResponse apiResponseLocalVar, string triggerID, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> metric, Option<List<string>> states)
        {
            bool suppressDefaultLog = false;
            AfterGetEventsList(ref suppressDefaultLog, apiResponseLocalVar, triggerID, size, p, from, to, metric, states);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="metric"></param>
        /// <param name="states"></param>
        partial void AfterGetEventsList(ref bool suppressDefaultLog, IGetEventsListApiResponse apiResponseLocalVar, string triggerID, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> metric, Option<List<string>> states);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="metric"></param>
        /// <param name="states"></param>
        private void OnErrorGetEventsListDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> metric, Option<List<string>> states)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetEventsList(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, triggerID, size, p, from, to, metric, states);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="triggerID"></param>
        /// <param name="size"></param>
        /// <param name="p"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <param name="metric"></param>
        /// <param name="states"></param>
        partial void OnErrorGetEventsList(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string triggerID, Option<int> size, Option<int> p, Option<string> from, Option<string> to, Option<string> metric, Option<List<string>> states);

        /// <summary>
        /// Gets all trigger events for current page and their count 
        /// </summary>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="metric">Regular expression that will be used to filter events (optional, default to &quot;.*&quot;)</param>
        /// <param name="states">String of &#39;,&#39; separated state names. If empty then all states will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEventsListApiResponse"/>&gt;</returns>
        public async Task<IGetEventsListApiResponse> GetEventsListOrDefaultAsync(string triggerID, Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> metric = default, Option<List<string>> states = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetEventsListAsync(triggerID, size, p, from, to, metric, states, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Gets all trigger events for current page and their count 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="triggerID">The ID of updated trigger</param>
        /// <param name="size">Number of items to be displayed on one page. if size &#x3D; -1 then all events returned (optional, default to 100)</param>
        /// <param name="p">Defines the number of the displayed page. E.g, p&#x3D;2 would display the 2nd page (optional, default to 0)</param>
        /// <param name="from">Start time of the time range (optional, default to &quot;-3hours&quot;)</param>
        /// <param name="to">End time of the time range (optional, default to &quot;now&quot;)</param>
        /// <param name="metric">Regular expression that will be used to filter events (optional, default to &quot;.*&quot;)</param>
        /// <param name="states">String of &#39;,&#39; separated state names. If empty then all states will be used. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetEventsListApiResponse"/>&gt;</returns>
        public async Task<IGetEventsListApiResponse> GetEventsListAsync(string triggerID, Option<int> size = default, Option<int> p = default, Option<string> from = default, Option<string> to = default, Option<string> metric = default, Option<List<string>> states = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetEventsList(triggerID, from, to, metric, states);

                FormatGetEventsList(ref triggerID, ref size, ref p, ref from, ref to, ref metric, states);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/event/{triggerID}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/event/{triggerID}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtriggerID%7D", Uri.EscapeDataString(triggerID.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (size.IsSet)
                        parseQueryStringLocalVar["size"] = ClientUtils.ParameterToString(size.Value);

                    if (p.IsSet)
                        parseQueryStringLocalVar["p"] = ClientUtils.ParameterToString(p.Value);

                    if (from.IsSet)
                        parseQueryStringLocalVar["from"] = ClientUtils.ParameterToString(from.Value);

                    if (to.IsSet)
                        parseQueryStringLocalVar["to"] = ClientUtils.ParameterToString(to.Value);

                    if (metric.IsSet)
                        parseQueryStringLocalVar["metric"] = ClientUtils.ParameterToString(metric.Value);

                    if (states.IsSet)
                        parseQueryStringLocalVar["states"] = ClientUtils.ParameterToString(states.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<GetEventsListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetEventsListApiResponse>();

                        GetEventsListApiResponse apiResponseLocalVar = new GetEventsListApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/event/{triggerID}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetEventsListDefaultImplementation(apiResponseLocalVar, triggerID, size, p, from, to, metric, states);

                        Events.ExecuteOnGetEventsList(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetEventsListDefaultImplementation(e, "/event/{triggerID}", uriBuilderLocalVar.Path, triggerID, size, p, from, to, metric, states);
                Events.ExecuteOnErrorGetEventsList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetEventsListApiResponse"/>
        /// </summary>
        public partial class GetEventsListApiResponse : Moira.ApiClient.Client.ApiResponse, IGetEventsListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetEventsListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetEventsListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetEventsListApiResponse(ILogger<GetEventsListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.DtoEventsList Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.DtoEventsList>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out Moira.ApiClient.Model.DtoEventsList result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse UnprocessableContent()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnprocessableContent
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnprocessableContent(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = UnprocessableContent();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)422);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Moira.ApiClient.Model.ApiErrorResponse InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Moira.ApiClient.Model.ApiErrorResponse>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError(out Moira.ApiClient.Model.ApiErrorResponse result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
