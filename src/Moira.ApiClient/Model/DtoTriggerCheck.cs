// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTriggerCheck
    /// </summary>
    public partial class DtoTriggerCheck : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTriggerCheck" /> class.
        /// </summary>
        /// <param name="eventTimestamp">eventTimestamp</param>
        /// <param name="lastSuccessfulCheckTimestamp">LastSuccessfulCheckTimestamp - time of the last check of the trigger, during which there were no errors</param>
        /// <param name="maintenance">maintenance</param>
        /// <param name="maintenanceInfo">maintenanceInfo</param>
        /// <param name="metrics">metrics</param>
        /// <param name="metricsToTargetRelation">MetricsToTargetRelation is a map that holds relation between metric names that was alone during last check and targets that fetched this metric  {\&quot;t1\&quot;: \&quot;metric.name.1\&quot;, \&quot;t2\&quot;: \&quot;metric.name.2\&quot;}</param>
        /// <param name="msg">msg</param>
        /// <param name="score">score</param>
        /// <param name="state">state</param>
        /// <param name="suppressed">suppressed</param>
        /// <param name="suppressedState">suppressedState</param>
        /// <param name="timestamp">Timestamp - time, which means when the checker last checked this trigger, this value stops updating if the trigger does not receive metrics</param>
        /// <param name="triggerId">triggerId</param>
        [JsonConstructor]
        public DtoTriggerCheck(Option<long?> eventTimestamp = default, Option<long?> lastSuccessfulCheckTimestamp = default, Option<long?> maintenance = default, Option<MoiraMaintenanceInfo> maintenanceInfo = default, Option<Dictionary<string, MoiraMetricState>> metrics = default, Option<Dictionary<string, string>> metricsToTargetRelation = default, Option<string> msg = default, Option<long?> score = default, Option<string> state = default, Option<bool?> suppressed = default, Option<string> suppressedState = default, Option<long?> timestamp = default, Option<string> triggerId = default)
        {
            EventTimestampOption = eventTimestamp;
            LastSuccessfulCheckTimestampOption = lastSuccessfulCheckTimestamp;
            MaintenanceOption = maintenance;
            MaintenanceInfoOption = maintenanceInfo;
            MetricsOption = metrics;
            MetricsToTargetRelationOption = metricsToTargetRelation;
            MsgOption = msg;
            ScoreOption = score;
            StateOption = state;
            SuppressedOption = suppressed;
            SuppressedStateOption = suppressedState;
            TimestampOption = timestamp;
            TriggerIdOption = triggerId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of EventTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EventTimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventTimestamp
        /// </summary>
        /* <example>1590741878</example> */
        [JsonPropertyName("event_timestamp")]
        public long? EventTimestamp { get { return this.EventTimestampOption; } set { this.EventTimestampOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of LastSuccessfulCheckTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> LastSuccessfulCheckTimestampOption { get; private set; }

        /// <summary>
        /// LastSuccessfulCheckTimestamp - time of the last check of the trigger, during which there were no errors
        /// </summary>
        /// <value>LastSuccessfulCheckTimestamp - time of the last check of the trigger, during which there were no errors</value>
        /* <example>1590741916</example> */
        [JsonPropertyName("last_successful_check_timestamp")]
        public long? LastSuccessfulCheckTimestamp { get { return this.LastSuccessfulCheckTimestampOption; } set { this.LastSuccessfulCheckTimestampOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Maintenance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> MaintenanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Maintenance
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("maintenance")]
        public long? Maintenance { get { return this.MaintenanceOption; } set { this.MaintenanceOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of MaintenanceInfo
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraMaintenanceInfo> MaintenanceInfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaintenanceInfo
        /// </summary>
        [JsonPropertyName("maintenance_info")]
        public MoiraMaintenanceInfo MaintenanceInfo { get { return this.MaintenanceInfoOption; } set { this.MaintenanceInfoOption = new Option<MoiraMaintenanceInfo>(value); } }

        /// <summary>
        /// Used to track the state of Metrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, MoiraMetricState>> MetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [JsonPropertyName("metrics")]
        public Dictionary<string, MoiraMetricState> Metrics { get { return this.MetricsOption; } set { this.MetricsOption = new Option<Dictionary<string, MoiraMetricState>>(value); } }

        /// <summary>
        /// Used to track the state of MetricsToTargetRelation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> MetricsToTargetRelationOption { get; private set; }

        /// <summary>
        /// MetricsToTargetRelation is a map that holds relation between metric names that was alone during last check and targets that fetched this metric  {\&quot;t1\&quot;: \&quot;metric.name.1\&quot;, \&quot;t2\&quot;: \&quot;metric.name.2\&quot;}
        /// </summary>
        /// <value>MetricsToTargetRelation is a map that holds relation between metric names that was alone during last check and targets that fetched this metric  {\&quot;t1\&quot;: \&quot;metric.name.1\&quot;, \&quot;t2\&quot;: \&quot;metric.name.2\&quot;}</value>
        /* <example>{t1&#x3D;metric.name.1, t2&#x3D;metric.name.2}</example> */
        [JsonPropertyName("metrics_to_target_relation")]
        public Dictionary<string, string> MetricsToTargetRelation { get { return this.MetricsToTargetRelationOption; } set { this.MetricsToTargetRelationOption = new Option<Dictionary<string, string>>(value); } }

        /// <summary>
        /// Used to track the state of Msg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [JsonPropertyName("msg")]
        public string Msg { get { return this.MsgOption; } set { this.MsgOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Score
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        /* <example>100</example> */
        [JsonPropertyName("score")]
        public long? Score { get { return this.ScoreOption; } set { this.ScoreOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /* <example>OK</example> */
        [JsonPropertyName("state")]
        public string State { get { return this.StateOption; } set { this.StateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Suppressed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SuppressedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Suppressed
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("suppressed")]
        public bool? Suppressed { get { return this.SuppressedOption; } set { this.SuppressedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of SuppressedState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SuppressedStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets SuppressedState
        /// </summary>
        [JsonPropertyName("suppressed_state")]
        public string SuppressedState { get { return this.SuppressedStateOption; } set { this.SuppressedStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampOption { get; private set; }

        /// <summary>
        /// Timestamp - time, which means when the checker last checked this trigger, this value stops updating if the trigger does not receive metrics
        /// </summary>
        /// <value>Timestamp - time, which means when the checker last checked this trigger, this value stops updating if the trigger does not receive metrics</value>
        /* <example>1590741916</example> */
        [JsonPropertyName("timestamp")]
        public long? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TriggerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerId
        /// </summary>
        /* <example>trigger_id</example> */
        [JsonPropertyName("trigger_id")]
        public string TriggerId { get { return this.TriggerIdOption; } set { this.TriggerIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTriggerCheck {\n");
            sb.Append("  EventTimestamp: ").Append(EventTimestamp).Append("\n");
            sb.Append("  LastSuccessfulCheckTimestamp: ").Append(LastSuccessfulCheckTimestamp).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("  MaintenanceInfo: ").Append(MaintenanceInfo).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  MetricsToTargetRelation: ").Append(MetricsToTargetRelation).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Suppressed: ").Append(Suppressed).Append("\n");
            sb.Append("  SuppressedState: ").Append(SuppressedState).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTriggerCheck" />
    /// </summary>
    public class DtoTriggerCheckJsonConverter : JsonConverter<DtoTriggerCheck>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTriggerCheck" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTriggerCheck Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> eventTimestamp = default;
            Option<long?> lastSuccessfulCheckTimestamp = default;
            Option<long?> maintenance = default;
            Option<MoiraMaintenanceInfo> maintenanceInfo = default;
            Option<Dictionary<string, MoiraMetricState>> metrics = default;
            Option<Dictionary<string, string>> metricsToTargetRelation = default;
            Option<string> msg = default;
            Option<long?> score = default;
            Option<string> state = default;
            Option<bool?> suppressed = default;
            Option<string> suppressedState = default;
            Option<long?> timestamp = default;
            Option<string> triggerId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event_timestamp":
                            eventTimestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "last_successful_check_timestamp":
                            lastSuccessfulCheckTimestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maintenance":
                            maintenance = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maintenance_info":
                            maintenanceInfo = new Option<MoiraMaintenanceInfo>(JsonSerializer.Deserialize<MoiraMaintenanceInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metrics":
                            metrics = new Option<Dictionary<string, MoiraMetricState>>(JsonSerializer.Deserialize<Dictionary<string, MoiraMetricState>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metrics_to_target_relation":
                            metricsToTargetRelation = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "msg":
                            msg = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "score":
                            score = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "suppressed":
                            suppressed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "suppressed_state":
                            suppressedState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "trigger_id":
                            triggerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (eventTimestamp.IsSet && eventTimestamp.Value == null)
                throw new ArgumentNullException(nameof(eventTimestamp), "Property is not nullable for class DtoTriggerCheck.");

            if (lastSuccessfulCheckTimestamp.IsSet && lastSuccessfulCheckTimestamp.Value == null)
                throw new ArgumentNullException(nameof(lastSuccessfulCheckTimestamp), "Property is not nullable for class DtoTriggerCheck.");

            if (maintenance.IsSet && maintenance.Value == null)
                throw new ArgumentNullException(nameof(maintenance), "Property is not nullable for class DtoTriggerCheck.");

            if (metrics.IsSet && metrics.Value == null)
                throw new ArgumentNullException(nameof(metrics), "Property is not nullable for class DtoTriggerCheck.");

            if (metricsToTargetRelation.IsSet && metricsToTargetRelation.Value == null)
                throw new ArgumentNullException(nameof(metricsToTargetRelation), "Property is not nullable for class DtoTriggerCheck.");

            if (msg.IsSet && msg.Value == null)
                throw new ArgumentNullException(nameof(msg), "Property is not nullable for class DtoTriggerCheck.");

            if (score.IsSet && score.Value == null)
                throw new ArgumentNullException(nameof(score), "Property is not nullable for class DtoTriggerCheck.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class DtoTriggerCheck.");

            if (suppressed.IsSet && suppressed.Value == null)
                throw new ArgumentNullException(nameof(suppressed), "Property is not nullable for class DtoTriggerCheck.");

            if (suppressedState.IsSet && suppressedState.Value == null)
                throw new ArgumentNullException(nameof(suppressedState), "Property is not nullable for class DtoTriggerCheck.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class DtoTriggerCheck.");

            if (triggerId.IsSet && triggerId.Value == null)
                throw new ArgumentNullException(nameof(triggerId), "Property is not nullable for class DtoTriggerCheck.");

            return new DtoTriggerCheck(eventTimestamp, lastSuccessfulCheckTimestamp, maintenance, maintenanceInfo, metrics, metricsToTargetRelation, msg, score, state, suppressed, suppressedState, timestamp, triggerId);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTriggerCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTriggerCheck dtoTriggerCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTriggerCheck, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTriggerCheck" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerCheck"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTriggerCheck dtoTriggerCheck, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTriggerCheck.MetricsOption.IsSet && dtoTriggerCheck.Metrics == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheck.Metrics), "Property is required for class DtoTriggerCheck.");

            if (dtoTriggerCheck.MetricsToTargetRelationOption.IsSet && dtoTriggerCheck.MetricsToTargetRelation == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheck.MetricsToTargetRelation), "Property is required for class DtoTriggerCheck.");

            if (dtoTriggerCheck.MsgOption.IsSet && dtoTriggerCheck.Msg == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheck.Msg), "Property is required for class DtoTriggerCheck.");

            if (dtoTriggerCheck.StateOption.IsSet && dtoTriggerCheck.State == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheck.State), "Property is required for class DtoTriggerCheck.");

            if (dtoTriggerCheck.SuppressedStateOption.IsSet && dtoTriggerCheck.SuppressedState == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheck.SuppressedState), "Property is required for class DtoTriggerCheck.");

            if (dtoTriggerCheck.TriggerIdOption.IsSet && dtoTriggerCheck.TriggerId == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheck.TriggerId), "Property is required for class DtoTriggerCheck.");

            if (dtoTriggerCheck.EventTimestampOption.IsSet)
                writer.WriteNumber("event_timestamp", dtoTriggerCheck.EventTimestampOption.Value.Value);

            if (dtoTriggerCheck.LastSuccessfulCheckTimestampOption.IsSet)
                writer.WriteNumber("last_successful_check_timestamp", dtoTriggerCheck.LastSuccessfulCheckTimestampOption.Value.Value);

            if (dtoTriggerCheck.MaintenanceOption.IsSet)
                writer.WriteNumber("maintenance", dtoTriggerCheck.MaintenanceOption.Value.Value);

            if (dtoTriggerCheck.MaintenanceInfoOption.IsSet)
                if (dtoTriggerCheck.MaintenanceInfoOption.Value != null)
                {
                    writer.WritePropertyName("maintenance_info");
                    JsonSerializer.Serialize(writer, dtoTriggerCheck.MaintenanceInfo, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("maintenance_info");
            if (dtoTriggerCheck.MetricsOption.IsSet)
            {
                writer.WritePropertyName("metrics");
                JsonSerializer.Serialize(writer, dtoTriggerCheck.Metrics, jsonSerializerOptions);
            }
            if (dtoTriggerCheck.MetricsToTargetRelationOption.IsSet)
            {
                writer.WritePropertyName("metrics_to_target_relation");
                JsonSerializer.Serialize(writer, dtoTriggerCheck.MetricsToTargetRelation, jsonSerializerOptions);
            }
            if (dtoTriggerCheck.MsgOption.IsSet)
                writer.WriteString("msg", dtoTriggerCheck.Msg);

            if (dtoTriggerCheck.ScoreOption.IsSet)
                writer.WriteNumber("score", dtoTriggerCheck.ScoreOption.Value.Value);

            if (dtoTriggerCheck.StateOption.IsSet)
                writer.WriteString("state", dtoTriggerCheck.State);

            if (dtoTriggerCheck.SuppressedOption.IsSet)
                writer.WriteBoolean("suppressed", dtoTriggerCheck.SuppressedOption.Value.Value);

            if (dtoTriggerCheck.SuppressedStateOption.IsSet)
                writer.WriteString("suppressed_state", dtoTriggerCheck.SuppressedState);

            if (dtoTriggerCheck.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", dtoTriggerCheck.TimestampOption.Value.Value);

            if (dtoTriggerCheck.TriggerIdOption.IsSet)
                writer.WriteString("trigger_id", dtoTriggerCheck.TriggerId);
        }
    }
}
