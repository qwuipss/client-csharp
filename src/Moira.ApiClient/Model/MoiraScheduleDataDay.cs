// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraScheduleDataDay
    /// </summary>
    public partial class MoiraScheduleDataDay : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraScheduleDataDay" /> class.
        /// </summary>
        /// <param name="enabled">enabled</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public MoiraScheduleDataDay(Option<bool?> enabled = default, Option<NameEnum?> name = default)
        {
            EnabledOption = enabled;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Name
        /// </summary>
        public enum NameEnum
        {
            /// <summary>
            /// Enum Mon for value: Mon
            /// </summary>
            Mon = 1,

            /// <summary>
            /// Enum Tue for value: Tue
            /// </summary>
            Tue = 2,

            /// <summary>
            /// Enum Wed for value: Wed
            /// </summary>
            Wed = 3,

            /// <summary>
            /// Enum Thu for value: Thu
            /// </summary>
            Thu = 4,

            /// <summary>
            /// Enum Fri for value: Fri
            /// </summary>
            Fri = 5,

            /// <summary>
            /// Enum Sat for value: Sat
            /// </summary>
            Sat = 6,

            /// <summary>
            /// Enum Sun for value: Sun
            /// </summary>
            Sun = 7
        }

        /// <summary>
        /// Returns a <see cref="NameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NameEnum NameEnumFromString(string value)
        {
            if (value.Equals("Mon"))
                return NameEnum.Mon;

            if (value.Equals("Tue"))
                return NameEnum.Tue;

            if (value.Equals("Wed"))
                return NameEnum.Wed;

            if (value.Equals("Thu"))
                return NameEnum.Thu;

            if (value.Equals("Fri"))
                return NameEnum.Fri;

            if (value.Equals("Sat"))
                return NameEnum.Sat;

            if (value.Equals("Sun"))
                return NameEnum.Sun;

            throw new NotImplementedException($"Could not convert value to type NameEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NameEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NameEnum? NameEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Mon"))
                return NameEnum.Mon;

            if (value.Equals("Tue"))
                return NameEnum.Tue;

            if (value.Equals("Wed"))
                return NameEnum.Wed;

            if (value.Equals("Thu"))
                return NameEnum.Thu;

            if (value.Equals("Fri"))
                return NameEnum.Fri;

            if (value.Equals("Sat"))
                return NameEnum.Sat;

            if (value.Equals("Sun"))
                return NameEnum.Sun;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NameEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string NameEnumToJsonValue(NameEnum? value)
        {
            if (value == NameEnum.Mon)
                return "Mon";

            if (value == NameEnum.Tue)
                return "Tue";

            if (value == NameEnum.Wed)
                return "Wed";

            if (value == NameEnum.Thu)
                return "Thu";

            if (value == NameEnum.Fri)
                return "Fri";

            if (value == NameEnum.Sat)
                return "Sat";

            if (value == NameEnum.Sun)
                return "Sun";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NameEnum?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Mon</example> */
        [JsonPropertyName("name")]
        public NameEnum? Name { get { return this.NameOption; } set { this.NameOption = new Option<NameEnum?>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraScheduleDataDay {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraScheduleDataDay" />
    /// </summary>
    public class MoiraScheduleDataDayJsonConverter : JsonConverter<MoiraScheduleDataDay>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraScheduleDataDay" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraScheduleDataDay Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> enabled = default;
            Option<MoiraScheduleDataDay.NameEnum?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            string nameRawValue = utf8JsonReader.GetString();
                            if (nameRawValue != null)
                                name = new Option<MoiraScheduleDataDay.NameEnum?>(MoiraScheduleDataDay.NameEnumFromStringOrDefault(nameRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class MoiraScheduleDataDay.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class MoiraScheduleDataDay.");

            return new MoiraScheduleDataDay(enabled, name);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraScheduleDataDay" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraScheduleDataDay"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraScheduleDataDay moiraScheduleDataDay, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraScheduleDataDay, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraScheduleDataDay" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraScheduleDataDay"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraScheduleDataDay moiraScheduleDataDay, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraScheduleDataDay.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", moiraScheduleDataDay.EnabledOption.Value.Value);

            var nameRawValue = MoiraScheduleDataDay.NameEnumToJsonValue(moiraScheduleDataDay.NameOption.Value.Value);
            writer.WriteString("name", nameRawValue);
        }
    }
}
