// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoSubscription
    /// </summary>
    public partial class DtoSubscription : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoSubscription" /> class.
        /// </summary>
        /// <param name="anyTags">anyTags</param>
        /// <param name="contacts">contacts</param>
        /// <param name="enabled">enabled</param>
        /// <param name="id">id</param>
        /// <param name="ignoreRecoverings">ignoreRecoverings</param>
        /// <param name="ignoreWarnings">ignoreWarnings</param>
        /// <param name="plotting">plotting</param>
        /// <param name="sched">sched</param>
        /// <param name="tags">tags</param>
        /// <param name="teamId">teamId</param>
        /// <param name="throttling">throttling</param>
        /// <param name="user">user</param>
        [JsonConstructor]
        public DtoSubscription(Option<bool?> anyTags = default, Option<List<string>> contacts = default, Option<bool?> enabled = default, Option<string> id = default, Option<bool?> ignoreRecoverings = default, Option<bool?> ignoreWarnings = default, Option<MoiraPlottingData> plotting = default, Option<MoiraScheduleData> sched = default, Option<List<string>> tags = default, Option<string> teamId = default, Option<bool?> throttling = default, Option<string> user = default)
        {
            AnyTagsOption = anyTags;
            ContactsOption = contacts;
            EnabledOption = enabled;
            IdOption = id;
            IgnoreRecoveringsOption = ignoreRecoverings;
            IgnoreWarningsOption = ignoreWarnings;
            PlottingOption = plotting;
            SchedOption = sched;
            TagsOption = tags;
            TeamIdOption = teamId;
            ThrottlingOption = throttling;
            UserOption = user;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AnyTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AnyTagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AnyTags
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("any_tags")]
        public bool? AnyTags { get { return this.AnyTagsOption; } set { this.AnyTagsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Contacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> ContactsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        /* <example>[acd2db98-1659-4a2f-b227-52d71f6e3ba1]</example> */
        [JsonPropertyName("contacts")]
        public List<string> Contacts { get { return this.ContactsOption; } set { this.ContactsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>292516ed-4924-4154-a62c-ebe312431fce</example> */
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IgnoreRecoverings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IgnoreRecoveringsOption { get; private set; }

        /// <summary>
        /// Gets or Sets IgnoreRecoverings
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("ignore_recoverings")]
        public bool? IgnoreRecoverings { get { return this.IgnoreRecoveringsOption; } set { this.IgnoreRecoveringsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IgnoreWarnings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IgnoreWarningsOption { get; private set; }

        /// <summary>
        /// Gets or Sets IgnoreWarnings
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("ignore_warnings")]
        public bool? IgnoreWarnings { get { return this.IgnoreWarningsOption; } set { this.IgnoreWarningsOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Plotting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraPlottingData> PlottingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Plotting
        /// </summary>
        [JsonPropertyName("plotting")]
        public MoiraPlottingData Plotting { get { return this.PlottingOption; } set { this.PlottingOption = new Option<MoiraPlottingData>(value); } }

        /// <summary>
        /// Used to track the state of Sched
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraScheduleData> SchedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sched
        /// </summary>
        [JsonPropertyName("sched")]
        public MoiraScheduleData Sched { get { return this.SchedOption; } set { this.SchedOption = new Option<MoiraScheduleData>(value); } }

        /// <summary>
        /// Used to track the state of Tags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> TagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        /* <example>[server, cpu]</example> */
        [JsonPropertyName("tags")]
        public List<string> Tags { get { return this.TagsOption; } set { this.TagsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of TeamId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TeamIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        /* <example>324516ed-4924-4154-a62c-eb124234fce</example> */
        [JsonPropertyName("team_id")]
        public string TeamId { get { return this.TeamIdOption; } set { this.TeamIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Throttling
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ThrottlingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Throttling
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("throttling")]
        public bool? Throttling { get { return this.ThrottlingOption; } set { this.ThrottlingOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public string User { get { return this.UserOption; } set { this.UserOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoSubscription {\n");
            sb.Append("  AnyTags: ").Append(AnyTags).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IgnoreRecoverings: ").Append(IgnoreRecoverings).Append("\n");
            sb.Append("  IgnoreWarnings: ").Append(IgnoreWarnings).Append("\n");
            sb.Append("  Plotting: ").Append(Plotting).Append("\n");
            sb.Append("  Sched: ").Append(Sched).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Throttling: ").Append(Throttling).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoSubscription" />
    /// </summary>
    public class DtoSubscriptionJsonConverter : JsonConverter<DtoSubscription>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoSubscription" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoSubscription Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> anyTags = default;
            Option<List<string>> contacts = default;
            Option<bool?> enabled = default;
            Option<string> id = default;
            Option<bool?> ignoreRecoverings = default;
            Option<bool?> ignoreWarnings = default;
            Option<MoiraPlottingData> plotting = default;
            Option<MoiraScheduleData> sched = default;
            Option<List<string>> tags = default;
            Option<string> teamId = default;
            Option<bool?> throttling = default;
            Option<string> user = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "any_tags":
                            anyTags = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "contacts":
                            contacts = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ignore_recoverings":
                            ignoreRecoverings = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ignore_warnings":
                            ignoreWarnings = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "plotting":
                            plotting = new Option<MoiraPlottingData>(JsonSerializer.Deserialize<MoiraPlottingData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sched":
                            sched = new Option<MoiraScheduleData>(JsonSerializer.Deserialize<MoiraScheduleData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            tags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "team_id":
                            teamId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "throttling":
                            throttling = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "user":
                            user = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (anyTags.IsSet && anyTags.Value == null)
                throw new ArgumentNullException(nameof(anyTags), "Property is not nullable for class DtoSubscription.");

            if (contacts.IsSet && contacts.Value == null)
                throw new ArgumentNullException(nameof(contacts), "Property is not nullable for class DtoSubscription.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class DtoSubscription.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoSubscription.");

            if (ignoreRecoverings.IsSet && ignoreRecoverings.Value == null)
                throw new ArgumentNullException(nameof(ignoreRecoverings), "Property is not nullable for class DtoSubscription.");

            if (ignoreWarnings.IsSet && ignoreWarnings.Value == null)
                throw new ArgumentNullException(nameof(ignoreWarnings), "Property is not nullable for class DtoSubscription.");

            if (plotting.IsSet && plotting.Value == null)
                throw new ArgumentNullException(nameof(plotting), "Property is not nullable for class DtoSubscription.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class DtoSubscription.");

            if (teamId.IsSet && teamId.Value == null)
                throw new ArgumentNullException(nameof(teamId), "Property is not nullable for class DtoSubscription.");

            if (throttling.IsSet && throttling.Value == null)
                throw new ArgumentNullException(nameof(throttling), "Property is not nullable for class DtoSubscription.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class DtoSubscription.");

            return new DtoSubscription(anyTags, contacts, enabled, id, ignoreRecoverings, ignoreWarnings, plotting, sched, tags, teamId, throttling, user);
        }

        /// <summary>
        /// Serializes a <see cref="DtoSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoSubscription dtoSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoSubscription, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoSubscription" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoSubscription"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoSubscription dtoSubscription, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoSubscription.ContactsOption.IsSet && dtoSubscription.Contacts == null)
                throw new ArgumentNullException(nameof(dtoSubscription.Contacts), "Property is required for class DtoSubscription.");

            if (dtoSubscription.IdOption.IsSet && dtoSubscription.Id == null)
                throw new ArgumentNullException(nameof(dtoSubscription.Id), "Property is required for class DtoSubscription.");

            if (dtoSubscription.PlottingOption.IsSet && dtoSubscription.Plotting == null)
                throw new ArgumentNullException(nameof(dtoSubscription.Plotting), "Property is required for class DtoSubscription.");

            if (dtoSubscription.TagsOption.IsSet && dtoSubscription.Tags == null)
                throw new ArgumentNullException(nameof(dtoSubscription.Tags), "Property is required for class DtoSubscription.");

            if (dtoSubscription.TeamIdOption.IsSet && dtoSubscription.TeamId == null)
                throw new ArgumentNullException(nameof(dtoSubscription.TeamId), "Property is required for class DtoSubscription.");

            if (dtoSubscription.UserOption.IsSet && dtoSubscription.User == null)
                throw new ArgumentNullException(nameof(dtoSubscription.User), "Property is required for class DtoSubscription.");

            if (dtoSubscription.AnyTagsOption.IsSet)
                writer.WriteBoolean("any_tags", dtoSubscription.AnyTagsOption.Value.Value);

            if (dtoSubscription.ContactsOption.IsSet)
            {
                writer.WritePropertyName("contacts");
                JsonSerializer.Serialize(writer, dtoSubscription.Contacts, jsonSerializerOptions);
            }
            if (dtoSubscription.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", dtoSubscription.EnabledOption.Value.Value);

            if (dtoSubscription.IdOption.IsSet)
                writer.WriteString("id", dtoSubscription.Id);

            if (dtoSubscription.IgnoreRecoveringsOption.IsSet)
                writer.WriteBoolean("ignore_recoverings", dtoSubscription.IgnoreRecoveringsOption.Value.Value);

            if (dtoSubscription.IgnoreWarningsOption.IsSet)
                writer.WriteBoolean("ignore_warnings", dtoSubscription.IgnoreWarningsOption.Value.Value);

            if (dtoSubscription.PlottingOption.IsSet)
            {
                writer.WritePropertyName("plotting");
                JsonSerializer.Serialize(writer, dtoSubscription.Plotting, jsonSerializerOptions);
            }
            if (dtoSubscription.SchedOption.IsSet)
                if (dtoSubscription.SchedOption.Value != null)
                {
                    writer.WritePropertyName("sched");
                    JsonSerializer.Serialize(writer, dtoSubscription.Sched, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("sched");
            if (dtoSubscription.TagsOption.IsSet)
            {
                writer.WritePropertyName("tags");
                JsonSerializer.Serialize(writer, dtoSubscription.Tags, jsonSerializerOptions);
            }
            if (dtoSubscription.TeamIdOption.IsSet)
                writer.WriteString("team_id", dtoSubscription.TeamId);

            if (dtoSubscription.ThrottlingOption.IsSet)
                writer.WriteBoolean("throttling", dtoSubscription.ThrottlingOption.Value.Value);

            if (dtoSubscription.UserOption.IsSet)
                writer.WriteString("user", dtoSubscription.User);
        }
    }
}
