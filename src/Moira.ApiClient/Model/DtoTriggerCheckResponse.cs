// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTriggerCheckResponse
    /// </summary>
    public partial class DtoTriggerCheckResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTriggerCheckResponse" /> class.
        /// </summary>
        /// <param name="targets">Graphite-like targets: t1, t2, ...</param>
        [JsonConstructor]
        public DtoTriggerCheckResponse(Option<List<DtoTreeOfProblems>> targets = default)
        {
            TargetsOption = targets;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Targets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoTreeOfProblems>> TargetsOption { get; private set; }

        /// <summary>
        /// Graphite-like targets: t1, t2, ...
        /// </summary>
        /// <value>Graphite-like targets: t1, t2, ...</value>
        [JsonPropertyName("targets")]
        public List<DtoTreeOfProblems> Targets { get { return this.TargetsOption; } set { this.TargetsOption = new Option<List<DtoTreeOfProblems>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTriggerCheckResponse {\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTriggerCheckResponse" />
    /// </summary>
    public class DtoTriggerCheckResponseJsonConverter : JsonConverter<DtoTriggerCheckResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTriggerCheckResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTriggerCheckResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DtoTreeOfProblems>> targets = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "targets":
                            targets = new Option<List<DtoTreeOfProblems>>(JsonSerializer.Deserialize<List<DtoTreeOfProblems>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (targets.IsSet && targets.Value == null)
                throw new ArgumentNullException(nameof(targets), "Property is not nullable for class DtoTriggerCheckResponse.");

            return new DtoTriggerCheckResponse(targets);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTriggerCheckResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerCheckResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTriggerCheckResponse dtoTriggerCheckResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTriggerCheckResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTriggerCheckResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerCheckResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTriggerCheckResponse dtoTriggerCheckResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTriggerCheckResponse.TargetsOption.IsSet && dtoTriggerCheckResponse.Targets == null)
                throw new ArgumentNullException(nameof(dtoTriggerCheckResponse.Targets), "Property is required for class DtoTriggerCheckResponse.");

            if (dtoTriggerCheckResponse.TargetsOption.IsSet)
            {
                writer.WritePropertyName("targets");
                JsonSerializer.Serialize(writer, dtoTriggerCheckResponse.Targets, jsonSerializerOptions);
            }
        }
    }
}
