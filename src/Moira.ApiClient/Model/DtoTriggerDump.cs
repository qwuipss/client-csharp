// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTriggerDump
    /// </summary>
    public partial class DtoTriggerDump : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTriggerDump" /> class.
        /// </summary>
        /// <param name="created">created</param>
        /// <param name="lastCheck">lastCheck</param>
        /// <param name="metrics">metrics</param>
        /// <param name="trigger">trigger</param>
        [JsonConstructor]
        public DtoTriggerDump(Option<string> created = default, Option<MoiraCheckData> lastCheck = default, Option<List<DtoPatternMetrics>> metrics = default, Option<MoiraTrigger> trigger = default)
        {
            CreatedOption = created;
            LastCheckOption = lastCheck;
            MetricsOption = metrics;
            TriggerOption = trigger;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Created
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [JsonPropertyName("created")]
        public string Created { get { return this.CreatedOption; } set { this.CreatedOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastCheck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraCheckData> LastCheckOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastCheck
        /// </summary>
        [JsonPropertyName("last_check")]
        public MoiraCheckData LastCheck { get { return this.LastCheckOption; } set { this.LastCheckOption = new Option<MoiraCheckData>(value); } }

        /// <summary>
        /// Used to track the state of Metrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoPatternMetrics>> MetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [JsonPropertyName("metrics")]
        public List<DtoPatternMetrics> Metrics { get { return this.MetricsOption; } set { this.MetricsOption = new Option<List<DtoPatternMetrics>>(value); } }

        /// <summary>
        /// Used to track the state of Trigger
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraTrigger> TriggerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [JsonPropertyName("trigger")]
        public MoiraTrigger Trigger { get { return this.TriggerOption; } set { this.TriggerOption = new Option<MoiraTrigger>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTriggerDump {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastCheck: ").Append(LastCheck).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTriggerDump" />
    /// </summary>
    public class DtoTriggerDumpJsonConverter : JsonConverter<DtoTriggerDump>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTriggerDump" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTriggerDump Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> created = default;
            Option<MoiraCheckData> lastCheck = default;
            Option<List<DtoPatternMetrics>> metrics = default;
            Option<MoiraTrigger> trigger = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "created":
                            created = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "last_check":
                            lastCheck = new Option<MoiraCheckData>(JsonSerializer.Deserialize<MoiraCheckData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metrics":
                            metrics = new Option<List<DtoPatternMetrics>>(JsonSerializer.Deserialize<List<DtoPatternMetrics>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trigger":
                            trigger = new Option<MoiraTrigger>(JsonSerializer.Deserialize<MoiraTrigger>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (created.IsSet && created.Value == null)
                throw new ArgumentNullException(nameof(created), "Property is not nullable for class DtoTriggerDump.");

            if (lastCheck.IsSet && lastCheck.Value == null)
                throw new ArgumentNullException(nameof(lastCheck), "Property is not nullable for class DtoTriggerDump.");

            if (metrics.IsSet && metrics.Value == null)
                throw new ArgumentNullException(nameof(metrics), "Property is not nullable for class DtoTriggerDump.");

            if (trigger.IsSet && trigger.Value == null)
                throw new ArgumentNullException(nameof(trigger), "Property is not nullable for class DtoTriggerDump.");

            return new DtoTriggerDump(created, lastCheck, metrics, trigger);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTriggerDump" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerDump"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTriggerDump dtoTriggerDump, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTriggerDump, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTriggerDump" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerDump"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTriggerDump dtoTriggerDump, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTriggerDump.CreatedOption.IsSet && dtoTriggerDump.Created == null)
                throw new ArgumentNullException(nameof(dtoTriggerDump.Created), "Property is required for class DtoTriggerDump.");

            if (dtoTriggerDump.LastCheckOption.IsSet && dtoTriggerDump.LastCheck == null)
                throw new ArgumentNullException(nameof(dtoTriggerDump.LastCheck), "Property is required for class DtoTriggerDump.");

            if (dtoTriggerDump.MetricsOption.IsSet && dtoTriggerDump.Metrics == null)
                throw new ArgumentNullException(nameof(dtoTriggerDump.Metrics), "Property is required for class DtoTriggerDump.");

            if (dtoTriggerDump.TriggerOption.IsSet && dtoTriggerDump.Trigger == null)
                throw new ArgumentNullException(nameof(dtoTriggerDump.Trigger), "Property is required for class DtoTriggerDump.");

            if (dtoTriggerDump.CreatedOption.IsSet)
                writer.WriteString("created", dtoTriggerDump.Created);

            if (dtoTriggerDump.LastCheckOption.IsSet)
            {
                writer.WritePropertyName("last_check");
                JsonSerializer.Serialize(writer, dtoTriggerDump.LastCheck, jsonSerializerOptions);
            }
            if (dtoTriggerDump.MetricsOption.IsSet)
            {
                writer.WritePropertyName("metrics");
                JsonSerializer.Serialize(writer, dtoTriggerDump.Metrics, jsonSerializerOptions);
            }
            if (dtoTriggerDump.TriggerOption.IsSet)
            {
                writer.WritePropertyName("trigger");
                JsonSerializer.Serialize(writer, dtoTriggerDump.Trigger, jsonSerializerOptions);
            }
        }
    }
}
