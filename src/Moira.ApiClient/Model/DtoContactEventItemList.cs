// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoContactEventItemList
    /// </summary>
    public partial class DtoContactEventItemList : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoContactEventItemList" /> class.
        /// </summary>
        /// <param name="list">list</param>
        [JsonConstructor]
        public DtoContactEventItemList(Option<List<DtoContactEventItem>> list = default)
        {
            ListOption = list;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of List
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoContactEventItem>> ListOption { get; private set; }

        /// <summary>
        /// Gets or Sets List
        /// </summary>
        [JsonPropertyName("list")]
        public List<DtoContactEventItem> List { get { return this.ListOption; } set { this.ListOption = new Option<List<DtoContactEventItem>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoContactEventItemList {\n");
            sb.Append("  List: ").Append(List).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoContactEventItemList" />
    /// </summary>
    public class DtoContactEventItemListJsonConverter : JsonConverter<DtoContactEventItemList>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoContactEventItemList" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoContactEventItemList Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DtoContactEventItem>> list = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "list":
                            list = new Option<List<DtoContactEventItem>>(JsonSerializer.Deserialize<List<DtoContactEventItem>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (list.IsSet && list.Value == null)
                throw new ArgumentNullException(nameof(list), "Property is not nullable for class DtoContactEventItemList.");

            return new DtoContactEventItemList(list);
        }

        /// <summary>
        /// Serializes a <see cref="DtoContactEventItemList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContactEventItemList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoContactEventItemList dtoContactEventItemList, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoContactEventItemList, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoContactEventItemList" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContactEventItemList"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoContactEventItemList dtoContactEventItemList, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoContactEventItemList.ListOption.IsSet && dtoContactEventItemList.List == null)
                throw new ArgumentNullException(nameof(dtoContactEventItemList.List), "Property is required for class DtoContactEventItemList.");

            if (dtoContactEventItemList.ListOption.IsSet)
            {
                writer.WritePropertyName("list");
                JsonSerializer.Serialize(writer, dtoContactEventItemList.List, jsonSerializerOptions);
            }
        }
    }
}
