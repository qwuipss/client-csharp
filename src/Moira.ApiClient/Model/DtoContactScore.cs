// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoContactScore
    /// </summary>
    public partial class DtoContactScore : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoContactScore" /> class.
        /// </summary>
        /// <param name="lastErr">LastErrMessage is the last error message encountered.</param>
        /// <param name="lastErrTimestamp">LastErrTimestamp is the timestamp of the last error.</param>
        /// <param name="scorePercent">ScorePercent is the percentage score of successful transactions.</param>
        /// <param name="status">Status is the current status of the contact.</param>
        [JsonConstructor]
        public DtoContactScore(Option<string> lastErr = default, Option<int?> lastErrTimestamp = default, Option<int?> scorePercent = default, Option<string> status = default)
        {
            LastErrOption = lastErr;
            LastErrTimestampOption = lastErrTimestamp;
            ScorePercentOption = scorePercent;
            StatusOption = status;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of LastErr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LastErrOption { get; private set; }

        /// <summary>
        /// LastErrMessage is the last error message encountered.
        /// </summary>
        /// <value>LastErrMessage is the last error message encountered.</value>
        [JsonPropertyName("last_err")]
        public string LastErr { get { return this.LastErrOption; } set { this.LastErrOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LastErrTimestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LastErrTimestampOption { get; private set; }

        /// <summary>
        /// LastErrTimestamp is the timestamp of the last error.
        /// </summary>
        /// <value>LastErrTimestamp is the timestamp of the last error.</value>
        [JsonPropertyName("last_err_timestamp")]
        public int? LastErrTimestamp { get { return this.LastErrTimestampOption; } set { this.LastErrTimestampOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ScorePercent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ScorePercentOption { get; private set; }

        /// <summary>
        /// ScorePercent is the percentage score of successful transactions.
        /// </summary>
        /// <value>ScorePercent is the percentage score of successful transactions.</value>
        [JsonPropertyName("score_percent")]
        public int? ScorePercent { get { return this.ScorePercentOption; } set { this.ScorePercentOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// Status is the current status of the contact.
        /// </summary>
        /// <value>Status is the current status of the contact.</value>
        [JsonPropertyName("status")]
        public string Status { get { return this.StatusOption; } set { this.StatusOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoContactScore {\n");
            sb.Append("  LastErr: ").Append(LastErr).Append("\n");
            sb.Append("  LastErrTimestamp: ").Append(LastErrTimestamp).Append("\n");
            sb.Append("  ScorePercent: ").Append(ScorePercent).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoContactScore" />
    /// </summary>
    public class DtoContactScoreJsonConverter : JsonConverter<DtoContactScore>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoContactScore" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoContactScore Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> lastErr = default;
            Option<int?> lastErrTimestamp = default;
            Option<int?> scorePercent = default;
            Option<string> status = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "last_err":
                            lastErr = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "last_err_timestamp":
                            lastErrTimestamp = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "score_percent":
                            scorePercent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (lastErr.IsSet && lastErr.Value == null)
                throw new ArgumentNullException(nameof(lastErr), "Property is not nullable for class DtoContactScore.");

            if (lastErrTimestamp.IsSet && lastErrTimestamp.Value == null)
                throw new ArgumentNullException(nameof(lastErrTimestamp), "Property is not nullable for class DtoContactScore.");

            if (scorePercent.IsSet && scorePercent.Value == null)
                throw new ArgumentNullException(nameof(scorePercent), "Property is not nullable for class DtoContactScore.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DtoContactScore.");

            return new DtoContactScore(lastErr, lastErrTimestamp, scorePercent, status);
        }

        /// <summary>
        /// Serializes a <see cref="DtoContactScore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContactScore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoContactScore dtoContactScore, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoContactScore, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoContactScore" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContactScore"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoContactScore dtoContactScore, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoContactScore.LastErrOption.IsSet && dtoContactScore.LastErr == null)
                throw new ArgumentNullException(nameof(dtoContactScore.LastErr), "Property is required for class DtoContactScore.");

            if (dtoContactScore.StatusOption.IsSet && dtoContactScore.Status == null)
                throw new ArgumentNullException(nameof(dtoContactScore.Status), "Property is required for class DtoContactScore.");

            if (dtoContactScore.LastErrOption.IsSet)
                writer.WriteString("last_err", dtoContactScore.LastErr);

            if (dtoContactScore.LastErrTimestampOption.IsSet)
                writer.WriteNumber("last_err_timestamp", dtoContactScore.LastErrTimestampOption.Value.Value);

            if (dtoContactScore.ScorePercentOption.IsSet)
                writer.WriteNumber("score_percent", dtoContactScore.ScorePercentOption.Value.Value);

            if (dtoContactScore.StatusOption.IsSet)
                writer.WriteString("status", dtoContactScore.Status);
        }
    }
}
