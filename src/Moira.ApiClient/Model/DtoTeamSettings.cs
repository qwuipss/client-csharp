// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTeamSettings
    /// </summary>
    public partial class DtoTeamSettings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTeamSettings" /> class.
        /// </summary>
        /// <param name="contacts">contacts</param>
        /// <param name="subscriptions">subscriptions</param>
        /// <param name="teamId">teamId</param>
        [JsonConstructor]
        public DtoTeamSettings(Option<List<DtoTeamContactWithScore>> contacts = default, Option<List<MoiraSubscriptionData>> subscriptions = default, Option<string> teamId = default)
        {
            ContactsOption = contacts;
            SubscriptionsOption = subscriptions;
            TeamIdOption = teamId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Contacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoTeamContactWithScore>> ContactsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [JsonPropertyName("contacts")]
        public List<DtoTeamContactWithScore> Contacts { get { return this.ContactsOption; } set { this.ContactsOption = new Option<List<DtoTeamContactWithScore>>(value); } }

        /// <summary>
        /// Used to track the state of Subscriptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MoiraSubscriptionData>> SubscriptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [JsonPropertyName("subscriptions")]
        public List<MoiraSubscriptionData> Subscriptions { get { return this.SubscriptionsOption; } set { this.SubscriptionsOption = new Option<List<MoiraSubscriptionData>>(value); } }

        /// <summary>
        /// Used to track the state of TeamId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TeamIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        /* <example>d5d98eb3-ee18-4f75-9364-244f67e23b54</example> */
        [JsonPropertyName("team_id")]
        public string TeamId { get { return this.TeamIdOption; } set { this.TeamIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTeamSettings {\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTeamSettings" />
    /// </summary>
    public class DtoTeamSettingsJsonConverter : JsonConverter<DtoTeamSettings>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTeamSettings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTeamSettings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<DtoTeamContactWithScore>> contacts = default;
            Option<List<MoiraSubscriptionData>> subscriptions = default;
            Option<string> teamId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contacts":
                            contacts = new Option<List<DtoTeamContactWithScore>>(JsonSerializer.Deserialize<List<DtoTeamContactWithScore>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "subscriptions":
                            subscriptions = new Option<List<MoiraSubscriptionData>>(JsonSerializer.Deserialize<List<MoiraSubscriptionData>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "team_id":
                            teamId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contacts.IsSet && contacts.Value == null)
                throw new ArgumentNullException(nameof(contacts), "Property is not nullable for class DtoTeamSettings.");

            if (subscriptions.IsSet && subscriptions.Value == null)
                throw new ArgumentNullException(nameof(subscriptions), "Property is not nullable for class DtoTeamSettings.");

            if (teamId.IsSet && teamId.Value == null)
                throw new ArgumentNullException(nameof(teamId), "Property is not nullable for class DtoTeamSettings.");

            return new DtoTeamSettings(contacts, subscriptions, teamId);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTeamSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTeamSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTeamSettings dtoTeamSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTeamSettings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTeamSettings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTeamSettings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTeamSettings dtoTeamSettings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTeamSettings.ContactsOption.IsSet && dtoTeamSettings.Contacts == null)
                throw new ArgumentNullException(nameof(dtoTeamSettings.Contacts), "Property is required for class DtoTeamSettings.");

            if (dtoTeamSettings.SubscriptionsOption.IsSet && dtoTeamSettings.Subscriptions == null)
                throw new ArgumentNullException(nameof(dtoTeamSettings.Subscriptions), "Property is required for class DtoTeamSettings.");

            if (dtoTeamSettings.TeamIdOption.IsSet && dtoTeamSettings.TeamId == null)
                throw new ArgumentNullException(nameof(dtoTeamSettings.TeamId), "Property is required for class DtoTeamSettings.");

            if (dtoTeamSettings.ContactsOption.IsSet)
            {
                writer.WritePropertyName("contacts");
                JsonSerializer.Serialize(writer, dtoTeamSettings.Contacts, jsonSerializerOptions);
            }
            if (dtoTeamSettings.SubscriptionsOption.IsSet)
            {
                writer.WritePropertyName("subscriptions");
                JsonSerializer.Serialize(writer, dtoTeamSettings.Subscriptions, jsonSerializerOptions);
            }
            if (dtoTeamSettings.TeamIdOption.IsSet)
                writer.WriteString("team_id", dtoTeamSettings.TeamId);
        }
    }
}
