// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoProblemOfTarget
    /// </summary>
    public partial class DtoProblemOfTarget : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoProblemOfTarget" /> class.
        /// </summary>
        /// <param name="argument">argument</param>
        /// <param name="description">description</param>
        /// <param name="position">position</param>
        /// <param name="problems">problems</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public DtoProblemOfTarget(Option<string> argument = default, Option<string> description = default, Option<int?> position = default, Option<List<DtoProblemOfTarget>> problems = default, Option<string> type = default)
        {
            ArgumentOption = argument;
            DescriptionOption = description;
            PositionOption = position;
            ProblemsOption = problems;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Argument
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ArgumentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Argument
        /// </summary>
        /* <example>consolidateBy</example> */
        [JsonPropertyName("argument")]
        public string Argument { get { return this.ArgumentOption; } set { this.ArgumentOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /* <example>This function affects only visual graph representation. It is meaningless in Moira</example> */
        [JsonPropertyName("description")]
        public string Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Position
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PositionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("position")]
        public int? Position { get { return this.PositionOption; } set { this.PositionOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Problems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<DtoProblemOfTarget>> ProblemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Problems
        /// </summary>
        [JsonPropertyName("problems")]
        public List<DtoProblemOfTarget> Problems { get { return this.ProblemsOption; } set { this.ProblemsOption = new Option<List<DtoProblemOfTarget>>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>warn</example> */
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoProblemOfTarget {\n");
            sb.Append("  Argument: ").Append(Argument).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Problems: ").Append(Problems).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoProblemOfTarget" />
    /// </summary>
    public class DtoProblemOfTargetJsonConverter : JsonConverter<DtoProblemOfTarget>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoProblemOfTarget" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoProblemOfTarget Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> argument = default;
            Option<string> description = default;
            Option<int?> position = default;
            Option<List<DtoProblemOfTarget>> problems = default;
            Option<string> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "argument":
                            argument = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "position":
                            position = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "problems":
                            problems = new Option<List<DtoProblemOfTarget>>(JsonSerializer.Deserialize<List<DtoProblemOfTarget>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (argument.IsSet && argument.Value == null)
                throw new ArgumentNullException(nameof(argument), "Property is not nullable for class DtoProblemOfTarget.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class DtoProblemOfTarget.");

            if (position.IsSet && position.Value == null)
                throw new ArgumentNullException(nameof(position), "Property is not nullable for class DtoProblemOfTarget.");

            if (problems.IsSet && problems.Value == null)
                throw new ArgumentNullException(nameof(problems), "Property is not nullable for class DtoProblemOfTarget.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DtoProblemOfTarget.");

            return new DtoProblemOfTarget(argument, description, position, problems, type);
        }

        /// <summary>
        /// Serializes a <see cref="DtoProblemOfTarget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoProblemOfTarget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoProblemOfTarget dtoProblemOfTarget, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoProblemOfTarget, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoProblemOfTarget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoProblemOfTarget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoProblemOfTarget dtoProblemOfTarget, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoProblemOfTarget.ArgumentOption.IsSet && dtoProblemOfTarget.Argument == null)
                throw new ArgumentNullException(nameof(dtoProblemOfTarget.Argument), "Property is required for class DtoProblemOfTarget.");

            if (dtoProblemOfTarget.DescriptionOption.IsSet && dtoProblemOfTarget.Description == null)
                throw new ArgumentNullException(nameof(dtoProblemOfTarget.Description), "Property is required for class DtoProblemOfTarget.");

            if (dtoProblemOfTarget.ProblemsOption.IsSet && dtoProblemOfTarget.Problems == null)
                throw new ArgumentNullException(nameof(dtoProblemOfTarget.Problems), "Property is required for class DtoProblemOfTarget.");

            if (dtoProblemOfTarget.TypeOption.IsSet && dtoProblemOfTarget.Type == null)
                throw new ArgumentNullException(nameof(dtoProblemOfTarget.Type), "Property is required for class DtoProblemOfTarget.");

            if (dtoProblemOfTarget.ArgumentOption.IsSet)
                writer.WriteString("argument", dtoProblemOfTarget.Argument);

            if (dtoProblemOfTarget.DescriptionOption.IsSet)
                writer.WriteString("description", dtoProblemOfTarget.Description);

            if (dtoProblemOfTarget.PositionOption.IsSet)
                writer.WriteNumber("position", dtoProblemOfTarget.PositionOption.Value.Value);

            if (dtoProblemOfTarget.ProblemsOption.IsSet)
            {
                writer.WritePropertyName("problems");
                JsonSerializer.Serialize(writer, dtoProblemOfTarget.Problems, jsonSerializerOptions);
            }
            if (dtoProblemOfTarget.TypeOption.IsSet)
                writer.WriteString("type", dtoProblemOfTarget.Type);
        }
    }
}
