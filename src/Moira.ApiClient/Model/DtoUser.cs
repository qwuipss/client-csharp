// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoUser
    /// </summary>
    public partial class DtoUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoUser" /> class.
        /// </summary>
        /// <param name="authEnabled">authEnabled</param>
        /// <param name="login">login</param>
        /// <param name="role">role</param>
        [JsonConstructor]
        public DtoUser(Option<bool?> authEnabled = default, Option<string> login = default, Option<string> role = default)
        {
            AuthEnabledOption = authEnabled;
            LoginOption = login;
            RoleOption = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AuthEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AuthEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthEnabled
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("auth_enabled")]
        public bool? AuthEnabled { get { return this.AuthEnabledOption; } set { this.AuthEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Login
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LoginOption { get; private set; }

        /// <summary>
        /// Gets or Sets Login
        /// </summary>
        /* <example>john</example> */
        [JsonPropertyName("login")]
        public string Login { get { return this.LoginOption; } set { this.LoginOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> RoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        /* <example>user</example> */
        [JsonPropertyName("role")]
        public string Role { get { return this.RoleOption; } set { this.RoleOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoUser {\n");
            sb.Append("  AuthEnabled: ").Append(AuthEnabled).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoUser" />
    /// </summary>
    public class DtoUserJsonConverter : JsonConverter<DtoUser>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoUser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoUser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> authEnabled = default;
            Option<string> login = default;
            Option<string> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "auth_enabled":
                            authEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "login":
                            login = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "role":
                            role = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (authEnabled.IsSet && authEnabled.Value == null)
                throw new ArgumentNullException(nameof(authEnabled), "Property is not nullable for class DtoUser.");

            if (login.IsSet && login.Value == null)
                throw new ArgumentNullException(nameof(login), "Property is not nullable for class DtoUser.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class DtoUser.");

            return new DtoUser(authEnabled, login, role);
        }

        /// <summary>
        /// Serializes a <see cref="DtoUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoUser dtoUser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoUser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoUser dtoUser, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoUser.LoginOption.IsSet && dtoUser.Login == null)
                throw new ArgumentNullException(nameof(dtoUser.Login), "Property is required for class DtoUser.");

            if (dtoUser.RoleOption.IsSet && dtoUser.Role == null)
                throw new ArgumentNullException(nameof(dtoUser.Role), "Property is required for class DtoUser.");

            if (dtoUser.AuthEnabledOption.IsSet)
                writer.WriteBoolean("auth_enabled", dtoUser.AuthEnabledOption.Value.Value);

            if (dtoUser.LoginOption.IsSet)
                writer.WriteString("login", dtoUser.Login);

            if (dtoUser.RoleOption.IsSet)
                writer.WriteString("role", dtoUser.Role);
        }
    }
}
