// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTagStatistics
    /// </summary>
    public partial class DtoTagStatistics : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTagStatistics" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="subscriptions">subscriptions</param>
        /// <param name="triggers">triggers</param>
        [JsonConstructor]
        public DtoTagStatistics(Option<string> name = default, Option<List<MoiraSubscriptionData>> subscriptions = default, Option<List<string>> triggers = default)
        {
            NameOption = name;
            SubscriptionsOption = subscriptions;
            TriggersOption = triggers;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>cpu</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Subscriptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MoiraSubscriptionData>> SubscriptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subscriptions
        /// </summary>
        [JsonPropertyName("subscriptions")]
        public List<MoiraSubscriptionData> Subscriptions { get { return this.SubscriptionsOption; } set { this.SubscriptionsOption = new Option<List<MoiraSubscriptionData>>(value); } }

        /// <summary>
        /// Used to track the state of Triggers
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> TriggersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Triggers
        /// </summary>
        /* <example>[bcba82f5-48cf-44c0-b7d6-e1d32c64a88c]</example> */
        [JsonPropertyName("triggers")]
        public List<string> Triggers { get { return this.TriggersOption; } set { this.TriggersOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTagStatistics {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Subscriptions: ").Append(Subscriptions).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTagStatistics" />
    /// </summary>
    public class DtoTagStatisticsJsonConverter : JsonConverter<DtoTagStatistics>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTagStatistics" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTagStatistics Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<List<MoiraSubscriptionData>> subscriptions = default;
            Option<List<string>> triggers = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "subscriptions":
                            subscriptions = new Option<List<MoiraSubscriptionData>>(JsonSerializer.Deserialize<List<MoiraSubscriptionData>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "triggers":
                            triggers = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoTagStatistics.");

            if (subscriptions.IsSet && subscriptions.Value == null)
                throw new ArgumentNullException(nameof(subscriptions), "Property is not nullable for class DtoTagStatistics.");

            if (triggers.IsSet && triggers.Value == null)
                throw new ArgumentNullException(nameof(triggers), "Property is not nullable for class DtoTagStatistics.");

            return new DtoTagStatistics(name, subscriptions, triggers);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTagStatistics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTagStatistics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTagStatistics dtoTagStatistics, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTagStatistics, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTagStatistics" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTagStatistics"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTagStatistics dtoTagStatistics, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTagStatistics.NameOption.IsSet && dtoTagStatistics.Name == null)
                throw new ArgumentNullException(nameof(dtoTagStatistics.Name), "Property is required for class DtoTagStatistics.");

            if (dtoTagStatistics.SubscriptionsOption.IsSet && dtoTagStatistics.Subscriptions == null)
                throw new ArgumentNullException(nameof(dtoTagStatistics.Subscriptions), "Property is required for class DtoTagStatistics.");

            if (dtoTagStatistics.TriggersOption.IsSet && dtoTagStatistics.Triggers == null)
                throw new ArgumentNullException(nameof(dtoTagStatistics.Triggers), "Property is required for class DtoTagStatistics.");

            if (dtoTagStatistics.NameOption.IsSet)
                writer.WriteString("name", dtoTagStatistics.Name);

            if (dtoTagStatistics.SubscriptionsOption.IsSet)
            {
                writer.WritePropertyName("subscriptions");
                JsonSerializer.Serialize(writer, dtoTagStatistics.Subscriptions, jsonSerializerOptions);
            }
            if (dtoTagStatistics.TriggersOption.IsSet)
            {
                writer.WritePropertyName("triggers");
                JsonSerializer.Serialize(writer, dtoTagStatistics.Triggers, jsonSerializerOptions);
            }
        }
    }
}
