// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoContactEventItem
    /// </summary>
    public partial class DtoContactEventItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoContactEventItem" /> class.
        /// </summary>
        /// <param name="metric">metric</param>
        /// <param name="oldState">oldState</param>
        /// <param name="state">state</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="triggerId">triggerId</param>
        [JsonConstructor]
        public DtoContactEventItem(Option<string> metric = default, Option<string> oldState = default, Option<string> state = default, Option<long?> timestamp = default, Option<string> triggerId = default)
        {
            MetricOption = metric;
            OldStateOption = oldState;
            StateOption = state;
            TimestampOption = timestamp;
            TriggerIdOption = triggerId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Metric
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MetricOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metric
        /// </summary>
        [JsonPropertyName("metric")]
        public string Metric { get { return this.MetricOption; } set { this.MetricOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OldState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OldStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets OldState
        /// </summary>
        [JsonPropertyName("old_state")]
        public string OldState { get { return this.OldStateOption; } set { this.OldStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string State { get { return this.StateOption; } set { this.StateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public long? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TriggerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerId
        /// </summary>
        [JsonPropertyName("trigger_id")]
        public string TriggerId { get { return this.TriggerIdOption; } set { this.TriggerIdOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoContactEventItem {\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  OldState: ").Append(OldState).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoContactEventItem" />
    /// </summary>
    public class DtoContactEventItemJsonConverter : JsonConverter<DtoContactEventItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoContactEventItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoContactEventItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> metric = default;
            Option<string> oldState = default;
            Option<string> state = default;
            Option<long?> timestamp = default;
            Option<string> triggerId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "metric":
                            metric = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "old_state":
                            oldState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "trigger_id":
                            triggerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (metric.IsSet && metric.Value == null)
                throw new ArgumentNullException(nameof(metric), "Property is not nullable for class DtoContactEventItem.");

            if (oldState.IsSet && oldState.Value == null)
                throw new ArgumentNullException(nameof(oldState), "Property is not nullable for class DtoContactEventItem.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class DtoContactEventItem.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class DtoContactEventItem.");

            if (triggerId.IsSet && triggerId.Value == null)
                throw new ArgumentNullException(nameof(triggerId), "Property is not nullable for class DtoContactEventItem.");

            return new DtoContactEventItem(metric, oldState, state, timestamp, triggerId);
        }

        /// <summary>
        /// Serializes a <see cref="DtoContactEventItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContactEventItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoContactEventItem dtoContactEventItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoContactEventItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoContactEventItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContactEventItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoContactEventItem dtoContactEventItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoContactEventItem.MetricOption.IsSet && dtoContactEventItem.Metric == null)
                throw new ArgumentNullException(nameof(dtoContactEventItem.Metric), "Property is required for class DtoContactEventItem.");

            if (dtoContactEventItem.OldStateOption.IsSet && dtoContactEventItem.OldState == null)
                throw new ArgumentNullException(nameof(dtoContactEventItem.OldState), "Property is required for class DtoContactEventItem.");

            if (dtoContactEventItem.StateOption.IsSet && dtoContactEventItem.State == null)
                throw new ArgumentNullException(nameof(dtoContactEventItem.State), "Property is required for class DtoContactEventItem.");

            if (dtoContactEventItem.TriggerIdOption.IsSet && dtoContactEventItem.TriggerId == null)
                throw new ArgumentNullException(nameof(dtoContactEventItem.TriggerId), "Property is required for class DtoContactEventItem.");

            if (dtoContactEventItem.MetricOption.IsSet)
                writer.WriteString("metric", dtoContactEventItem.Metric);

            if (dtoContactEventItem.OldStateOption.IsSet)
                writer.WriteString("old_state", dtoContactEventItem.OldState);

            if (dtoContactEventItem.StateOption.IsSet)
                writer.WriteString("state", dtoContactEventItem.State);

            if (dtoContactEventItem.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", dtoContactEventItem.TimestampOption.Value.Value);

            if (dtoContactEventItem.TriggerIdOption.IsSet)
                writer.WriteString("trigger_id", dtoContactEventItem.TriggerId);
        }
    }
}
