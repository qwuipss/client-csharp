// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraEventInfo
    /// </summary>
    public partial class MoiraEventInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraEventInfo" /> class.
        /// </summary>
        /// <param name="interval">interval</param>
        /// <param name="maintenance">maintenance</param>
        [JsonConstructor]
        public MoiraEventInfo(Option<long?> interval = default, Option<MoiraMaintenanceInfo> maintenance = default)
        {
            IntervalOption = interval;
            MaintenanceOption = maintenance;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Interval
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> IntervalOption { get; private set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("interval")]
        public long? Interval { get { return this.IntervalOption; } set { this.IntervalOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Maintenance
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraMaintenanceInfo> MaintenanceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Maintenance
        /// </summary>
        [JsonPropertyName("maintenance")]
        public MoiraMaintenanceInfo Maintenance { get { return this.MaintenanceOption; } set { this.MaintenanceOption = new Option<MoiraMaintenanceInfo>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraEventInfo {\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Maintenance: ").Append(Maintenance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraEventInfo" />
    /// </summary>
    public class MoiraEventInfoJsonConverter : JsonConverter<MoiraEventInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraEventInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraEventInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> interval = default;
            Option<MoiraMaintenanceInfo> maintenance = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "interval":
                            interval = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "maintenance":
                            maintenance = new Option<MoiraMaintenanceInfo>(JsonSerializer.Deserialize<MoiraMaintenanceInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new MoiraEventInfo(interval, maintenance);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraEventInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraEventInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraEventInfo moiraEventInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraEventInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraEventInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraEventInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraEventInfo moiraEventInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraEventInfo.IntervalOption.IsSet)
                if (moiraEventInfo.IntervalOption.Value != null)
                    writer.WriteNumber("interval", moiraEventInfo.IntervalOption.Value.Value);
                else
                    writer.WriteNull("interval");

            if (moiraEventInfo.MaintenanceOption.IsSet)
                if (moiraEventInfo.MaintenanceOption.Value != null)
                {
                    writer.WritePropertyName("maintenance");
                    JsonSerializer.Serialize(writer, moiraEventInfo.Maintenance, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("maintenance");
        }
    }
}
