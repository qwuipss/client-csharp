// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// ApiWebContact
    /// </summary>
    public partial class ApiWebContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiWebContact" /> class.
        /// </summary>
        /// <param name="help">help</param>
        /// <param name="label">label</param>
        /// <param name="logoUri">logoUri</param>
        /// <param name="placeholder">placeholder</param>
        /// <param name="type">type</param>
        /// <param name="validation">validation</param>
        [JsonConstructor]
        public ApiWebContact(Option<string> help = default, Option<string> label = default, Option<string> logoUri = default, Option<string> placeholder = default, Option<string> type = default, Option<string> validation = default)
        {
            HelpOption = help;
            LabelOption = label;
            LogoUriOption = logoUri;
            PlaceholderOption = placeholder;
            TypeOption = type;
            ValidationOption = validation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Help
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HelpOption { get; private set; }

        /// <summary>
        /// Gets or Sets Help
        /// </summary>
        /* <example>### Domains whitelist:
 - moira.ru
</example> */
        [JsonPropertyName("help")]
        public string Help { get { return this.HelpOption; } set { this.HelpOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Label
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LabelOption { get; private set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        /* <example>Webhook</example> */
        [JsonPropertyName("label")]
        public string Label { get { return this.LabelOption; } set { this.LabelOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of LogoUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogoUriOption { get; private set; }

        /// <summary>
        /// Gets or Sets LogoUri
        /// </summary>
        /* <example>discord-logo.svg</example> */
        [JsonPropertyName("logo_uri")]
        public string LogoUri { get { return this.LogoUriOption; } set { this.LogoUriOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Placeholder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PlaceholderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Placeholder
        /// </summary>
        /* <example>https://moira.ru/webhooks</example> */
        [JsonPropertyName("placeholder")]
        public string Placeholder { get { return this.PlaceholderOption; } set { this.PlaceholderOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>webhook</example> */
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Validation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ValidationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        /* <example>^(http|https):\/\/.*(moira.ru)(:[0-9]{2,5})?\/</example> */
        [JsonPropertyName("validation")]
        public string Validation { get { return this.ValidationOption; } set { this.ValidationOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiWebContact {\n");
            sb.Append("  Help: ").Append(Help).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiWebContact" />
    /// </summary>
    public class ApiWebContactJsonConverter : JsonConverter<ApiWebContact>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiWebContact" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiWebContact Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> help = default;
            Option<string> label = default;
            Option<string> logoUri = default;
            Option<string> placeholder = default;
            Option<string> type = default;
            Option<string> validation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "help":
                            help = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "label":
                            label = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logo_uri":
                            logoUri = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "placeholder":
                            placeholder = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "validation":
                            validation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (help.IsSet && help.Value == null)
                throw new ArgumentNullException(nameof(help), "Property is not nullable for class ApiWebContact.");

            if (label.IsSet && label.Value == null)
                throw new ArgumentNullException(nameof(label), "Property is not nullable for class ApiWebContact.");

            if (logoUri.IsSet && logoUri.Value == null)
                throw new ArgumentNullException(nameof(logoUri), "Property is not nullable for class ApiWebContact.");

            if (placeholder.IsSet && placeholder.Value == null)
                throw new ArgumentNullException(nameof(placeholder), "Property is not nullable for class ApiWebContact.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ApiWebContact.");

            if (validation.IsSet && validation.Value == null)
                throw new ArgumentNullException(nameof(validation), "Property is not nullable for class ApiWebContact.");

            return new ApiWebContact(help, label, logoUri, placeholder, type, validation);
        }

        /// <summary>
        /// Serializes a <see cref="ApiWebContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiWebContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiWebContact apiWebContact, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiWebContact, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiWebContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiWebContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiWebContact apiWebContact, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiWebContact.HelpOption.IsSet && apiWebContact.Help == null)
                throw new ArgumentNullException(nameof(apiWebContact.Help), "Property is required for class ApiWebContact.");

            if (apiWebContact.LabelOption.IsSet && apiWebContact.Label == null)
                throw new ArgumentNullException(nameof(apiWebContact.Label), "Property is required for class ApiWebContact.");

            if (apiWebContact.LogoUriOption.IsSet && apiWebContact.LogoUri == null)
                throw new ArgumentNullException(nameof(apiWebContact.LogoUri), "Property is required for class ApiWebContact.");

            if (apiWebContact.PlaceholderOption.IsSet && apiWebContact.Placeholder == null)
                throw new ArgumentNullException(nameof(apiWebContact.Placeholder), "Property is required for class ApiWebContact.");

            if (apiWebContact.TypeOption.IsSet && apiWebContact.Type == null)
                throw new ArgumentNullException(nameof(apiWebContact.Type), "Property is required for class ApiWebContact.");

            if (apiWebContact.ValidationOption.IsSet && apiWebContact.Validation == null)
                throw new ArgumentNullException(nameof(apiWebContact.Validation), "Property is required for class ApiWebContact.");

            if (apiWebContact.HelpOption.IsSet)
                writer.WriteString("help", apiWebContact.Help);

            if (apiWebContact.LabelOption.IsSet)
                writer.WriteString("label", apiWebContact.Label);

            if (apiWebContact.LogoUriOption.IsSet)
                writer.WriteString("logo_uri", apiWebContact.LogoUri);

            if (apiWebContact.PlaceholderOption.IsSet)
                writer.WriteString("placeholder", apiWebContact.Placeholder);

            if (apiWebContact.TypeOption.IsSet)
                writer.WriteString("type", apiWebContact.Type);

            if (apiWebContact.ValidationOption.IsSet)
                writer.WriteString("validation", apiWebContact.Validation);
        }
    }
}
