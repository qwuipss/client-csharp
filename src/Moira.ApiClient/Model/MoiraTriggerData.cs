// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraTriggerData
    /// </summary>
    public partial class MoiraTriggerData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraTriggerData" /> class.
        /// </summary>
        /// <param name="notifierTriggerTags">notifierTriggerTags</param>
        /// <param name="clusterId">clusterId</param>
        /// <param name="desc">desc</param>
        /// <param name="errorValue">errorValue</param>
        /// <param name="id">id</param>
        /// <param name="isRemote">isRemote</param>
        /// <param name="name">name</param>
        /// <param name="targets">targets</param>
        /// <param name="triggerSource">triggerSource</param>
        /// <param name="warnValue">warnValue</param>
        [JsonConstructor]
        public MoiraTriggerData(Option<List<string>> notifierTriggerTags = default, Option<string> clusterId = default, Option<string> desc = default, Option<decimal?> errorValue = default, Option<string> id = default, Option<bool?> isRemote = default, Option<string> name = default, Option<List<string>> targets = default, Option<string> triggerSource = default, Option<decimal?> warnValue = default)
        {
            NotifierTriggerTagsOption = notifierTriggerTags;
            ClusterIdOption = clusterId;
            DescOption = desc;
            ErrorValueOption = errorValue;
            IdOption = id;
            IsRemoteOption = isRemote;
            NameOption = name;
            TargetsOption = targets;
            TriggerSourceOption = triggerSource;
            WarnValueOption = warnValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of NotifierTriggerTags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> NotifierTriggerTagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NotifierTriggerTags
        /// </summary>
        /* <example>[server, disk]</example> */
        [JsonPropertyName("__notifier_trigger_tags")]
        public List<string> NotifierTriggerTags { get { return this.NotifierTriggerTagsOption; } set { this.NotifierTriggerTagsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of ClusterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClusterIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        /* <example>default</example> */
        [JsonPropertyName("cluster_id")]
        public string ClusterId { get { return this.ClusterIdOption; } set { this.ClusterIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Desc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescOption { get; private set; }

        /// <summary>
        /// Gets or Sets Desc
        /// </summary>
        /* <example>check the size of /var/log</example> */
        [JsonPropertyName("desc")]
        public string Desc { get { return this.DescOption; } set { this.DescOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ErrorValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ErrorValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets ErrorValue
        /// </summary>
        /* <example>1000</example> */
        [JsonPropertyName("error_value")]
        public decimal? ErrorValue { get { return this.ErrorValueOption; } set { this.ErrorValueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>292516ed-4924-4154-a62c-ebe312431fce</example> */
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsRemote
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRemoteOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRemote
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("is_remote")]
        public bool? IsRemote { get { return this.IsRemoteOption; } set { this.IsRemoteOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Not enough disk space left</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Targets
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> TargetsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        /* <example>[devOps.my_server.hdd.freespace_mbytes]</example> */
        [JsonPropertyName("targets")]
        public List<string> Targets { get { return this.TargetsOption; } set { this.TargetsOption = new Option<List<string>>(value); } }

        /// <summary>
        /// Used to track the state of TriggerSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerSource
        /// </summary>
        /* <example>graphite_local</example> */
        [JsonPropertyName("trigger_source")]
        public string TriggerSource { get { return this.TriggerSourceOption; } set { this.TriggerSourceOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of WarnValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> WarnValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets WarnValue
        /// </summary>
        /* <example>5000</example> */
        [JsonPropertyName("warn_value")]
        public decimal? WarnValue { get { return this.WarnValueOption; } set { this.WarnValueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraTriggerData {\n");
            sb.Append("  NotifierTriggerTags: ").Append(NotifierTriggerTags).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  ErrorValue: ").Append(ErrorValue).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRemote: ").Append(IsRemote).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  TriggerSource: ").Append(TriggerSource).Append("\n");
            sb.Append("  WarnValue: ").Append(WarnValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraTriggerData" />
    /// </summary>
    public class MoiraTriggerDataJsonConverter : JsonConverter<MoiraTriggerData>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraTriggerData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraTriggerData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>> notifierTriggerTags = default;
            Option<string> clusterId = default;
            Option<string> desc = default;
            Option<decimal?> errorValue = default;
            Option<string> id = default;
            Option<bool?> isRemote = default;
            Option<string> name = default;
            Option<List<string>> targets = default;
            Option<string> triggerSource = default;
            Option<decimal?> warnValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "__notifier_trigger_tags":
                            notifierTriggerTags = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "cluster_id":
                            clusterId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "desc":
                            desc = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "error_value":
                            errorValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "is_remote":
                            isRemote = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "targets":
                            targets = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trigger_source":
                            triggerSource = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "warn_value":
                            warnValue = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (notifierTriggerTags.IsSet && notifierTriggerTags.Value == null)
                throw new ArgumentNullException(nameof(notifierTriggerTags), "Property is not nullable for class MoiraTriggerData.");

            if (clusterId.IsSet && clusterId.Value == null)
                throw new ArgumentNullException(nameof(clusterId), "Property is not nullable for class MoiraTriggerData.");

            if (desc.IsSet && desc.Value == null)
                throw new ArgumentNullException(nameof(desc), "Property is not nullable for class MoiraTriggerData.");

            if (errorValue.IsSet && errorValue.Value == null)
                throw new ArgumentNullException(nameof(errorValue), "Property is not nullable for class MoiraTriggerData.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class MoiraTriggerData.");

            if (isRemote.IsSet && isRemote.Value == null)
                throw new ArgumentNullException(nameof(isRemote), "Property is not nullable for class MoiraTriggerData.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class MoiraTriggerData.");

            if (targets.IsSet && targets.Value == null)
                throw new ArgumentNullException(nameof(targets), "Property is not nullable for class MoiraTriggerData.");

            if (triggerSource.IsSet && triggerSource.Value == null)
                throw new ArgumentNullException(nameof(triggerSource), "Property is not nullable for class MoiraTriggerData.");

            if (warnValue.IsSet && warnValue.Value == null)
                throw new ArgumentNullException(nameof(warnValue), "Property is not nullable for class MoiraTriggerData.");

            return new MoiraTriggerData(notifierTriggerTags, clusterId, desc, errorValue, id, isRemote, name, targets, triggerSource, warnValue);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraTriggerData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraTriggerData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraTriggerData moiraTriggerData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraTriggerData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraTriggerData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraTriggerData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraTriggerData moiraTriggerData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraTriggerData.NotifierTriggerTagsOption.IsSet && moiraTriggerData.NotifierTriggerTags == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.NotifierTriggerTags), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.ClusterIdOption.IsSet && moiraTriggerData.ClusterId == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.ClusterId), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.DescOption.IsSet && moiraTriggerData.Desc == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.Desc), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.IdOption.IsSet && moiraTriggerData.Id == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.Id), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.NameOption.IsSet && moiraTriggerData.Name == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.Name), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.TargetsOption.IsSet && moiraTriggerData.Targets == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.Targets), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.TriggerSourceOption.IsSet && moiraTriggerData.TriggerSource == null)
                throw new ArgumentNullException(nameof(moiraTriggerData.TriggerSource), "Property is required for class MoiraTriggerData.");

            if (moiraTriggerData.NotifierTriggerTagsOption.IsSet)
            {
                writer.WritePropertyName("__notifier_trigger_tags");
                JsonSerializer.Serialize(writer, moiraTriggerData.NotifierTriggerTags, jsonSerializerOptions);
            }
            if (moiraTriggerData.ClusterIdOption.IsSet)
                writer.WriteString("cluster_id", moiraTriggerData.ClusterId);

            if (moiraTriggerData.DescOption.IsSet)
                writer.WriteString("desc", moiraTriggerData.Desc);

            if (moiraTriggerData.ErrorValueOption.IsSet)
                writer.WriteNumber("error_value", moiraTriggerData.ErrorValueOption.Value.Value);

            if (moiraTriggerData.IdOption.IsSet)
                writer.WriteString("id", moiraTriggerData.Id);

            if (moiraTriggerData.IsRemoteOption.IsSet)
                writer.WriteBoolean("is_remote", moiraTriggerData.IsRemoteOption.Value.Value);

            if (moiraTriggerData.NameOption.IsSet)
                writer.WriteString("name", moiraTriggerData.Name);

            if (moiraTriggerData.TargetsOption.IsSet)
            {
                writer.WritePropertyName("targets");
                JsonSerializer.Serialize(writer, moiraTriggerData.Targets, jsonSerializerOptions);
            }
            if (moiraTriggerData.TriggerSourceOption.IsSet)
                writer.WriteString("trigger_source", moiraTriggerData.TriggerSource);

            if (moiraTriggerData.WarnValueOption.IsSet)
                writer.WriteNumber("warn_value", moiraTriggerData.WarnValueOption.Value.Value);
        }
    }
}
