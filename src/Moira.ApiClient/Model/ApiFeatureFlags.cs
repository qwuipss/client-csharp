// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// ApiFeatureFlags
    /// </summary>
    public partial class ApiFeatureFlags : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiFeatureFlags" /> class.
        /// </summary>
        /// <param name="celebrationMode">celebrationMode</param>
        /// <param name="isPlottingAvailable">isPlottingAvailable</param>
        /// <param name="isPlottingDefaultOn">isPlottingDefaultOn</param>
        /// <param name="isReadonlyEnabled">isReadonlyEnabled</param>
        /// <param name="isSubscriptionToAllTagsAvailable">isSubscriptionToAllTagsAvailable</param>
        [JsonConstructor]
        public ApiFeatureFlags(Option<string> celebrationMode = default, Option<bool?> isPlottingAvailable = default, Option<bool?> isPlottingDefaultOn = default, Option<bool?> isReadonlyEnabled = default, Option<bool?> isSubscriptionToAllTagsAvailable = default)
        {
            CelebrationModeOption = celebrationMode;
            IsPlottingAvailableOption = isPlottingAvailable;
            IsPlottingDefaultOnOption = isPlottingDefaultOn;
            IsReadonlyEnabledOption = isReadonlyEnabled;
            IsSubscriptionToAllTagsAvailableOption = isSubscriptionToAllTagsAvailable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CelebrationMode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CelebrationModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets CelebrationMode
        /// </summary>
        /* <example>new_year</example> */
        [JsonPropertyName("celebrationMode")]
        public string CelebrationMode { get { return this.CelebrationModeOption; } set { this.CelebrationModeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsPlottingAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPlottingAvailableOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsPlottingAvailable
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("isPlottingAvailable")]
        public bool? IsPlottingAvailable { get { return this.IsPlottingAvailableOption; } set { this.IsPlottingAvailableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsPlottingDefaultOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsPlottingDefaultOnOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsPlottingDefaultOn
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("isPlottingDefaultOn")]
        public bool? IsPlottingDefaultOn { get { return this.IsPlottingDefaultOnOption; } set { this.IsPlottingDefaultOnOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsReadonlyEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsReadonlyEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsReadonlyEnabled
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("isReadonlyEnabled")]
        public bool? IsReadonlyEnabled { get { return this.IsReadonlyEnabledOption; } set { this.IsReadonlyEnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of IsSubscriptionToAllTagsAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSubscriptionToAllTagsAvailableOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSubscriptionToAllTagsAvailable
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("isSubscriptionToAllTagsAvailable")]
        public bool? IsSubscriptionToAllTagsAvailable { get { return this.IsSubscriptionToAllTagsAvailableOption; } set { this.IsSubscriptionToAllTagsAvailableOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiFeatureFlags {\n");
            sb.Append("  CelebrationMode: ").Append(CelebrationMode).Append("\n");
            sb.Append("  IsPlottingAvailable: ").Append(IsPlottingAvailable).Append("\n");
            sb.Append("  IsPlottingDefaultOn: ").Append(IsPlottingDefaultOn).Append("\n");
            sb.Append("  IsReadonlyEnabled: ").Append(IsReadonlyEnabled).Append("\n");
            sb.Append("  IsSubscriptionToAllTagsAvailable: ").Append(IsSubscriptionToAllTagsAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiFeatureFlags" />
    /// </summary>
    public class ApiFeatureFlagsJsonConverter : JsonConverter<ApiFeatureFlags>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiFeatureFlags" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiFeatureFlags Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> celebrationMode = default;
            Option<bool?> isPlottingAvailable = default;
            Option<bool?> isPlottingDefaultOn = default;
            Option<bool?> isReadonlyEnabled = default;
            Option<bool?> isSubscriptionToAllTagsAvailable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "celebrationMode":
                            celebrationMode = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isPlottingAvailable":
                            isPlottingAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isPlottingDefaultOn":
                            isPlottingDefaultOn = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isReadonlyEnabled":
                            isReadonlyEnabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "isSubscriptionToAllTagsAvailable":
                            isSubscriptionToAllTagsAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (celebrationMode.IsSet && celebrationMode.Value == null)
                throw new ArgumentNullException(nameof(celebrationMode), "Property is not nullable for class ApiFeatureFlags.");

            if (isPlottingAvailable.IsSet && isPlottingAvailable.Value == null)
                throw new ArgumentNullException(nameof(isPlottingAvailable), "Property is not nullable for class ApiFeatureFlags.");

            if (isPlottingDefaultOn.IsSet && isPlottingDefaultOn.Value == null)
                throw new ArgumentNullException(nameof(isPlottingDefaultOn), "Property is not nullable for class ApiFeatureFlags.");

            if (isReadonlyEnabled.IsSet && isReadonlyEnabled.Value == null)
                throw new ArgumentNullException(nameof(isReadonlyEnabled), "Property is not nullable for class ApiFeatureFlags.");

            if (isSubscriptionToAllTagsAvailable.IsSet && isSubscriptionToAllTagsAvailable.Value == null)
                throw new ArgumentNullException(nameof(isSubscriptionToAllTagsAvailable), "Property is not nullable for class ApiFeatureFlags.");

            return new ApiFeatureFlags(celebrationMode, isPlottingAvailable, isPlottingDefaultOn, isReadonlyEnabled, isSubscriptionToAllTagsAvailable);
        }

        /// <summary>
        /// Serializes a <see cref="ApiFeatureFlags" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiFeatureFlags"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiFeatureFlags apiFeatureFlags, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiFeatureFlags, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiFeatureFlags" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiFeatureFlags"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiFeatureFlags apiFeatureFlags, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiFeatureFlags.CelebrationModeOption.IsSet && apiFeatureFlags.CelebrationMode == null)
                throw new ArgumentNullException(nameof(apiFeatureFlags.CelebrationMode), "Property is required for class ApiFeatureFlags.");

            if (apiFeatureFlags.CelebrationModeOption.IsSet)
                writer.WriteString("celebrationMode", apiFeatureFlags.CelebrationMode);

            if (apiFeatureFlags.IsPlottingAvailableOption.IsSet)
                writer.WriteBoolean("isPlottingAvailable", apiFeatureFlags.IsPlottingAvailableOption.Value.Value);

            if (apiFeatureFlags.IsPlottingDefaultOnOption.IsSet)
                writer.WriteBoolean("isPlottingDefaultOn", apiFeatureFlags.IsPlottingDefaultOnOption.Value.Value);

            if (apiFeatureFlags.IsReadonlyEnabledOption.IsSet)
                writer.WriteBoolean("isReadonlyEnabled", apiFeatureFlags.IsReadonlyEnabledOption.Value.Value);

            if (apiFeatureFlags.IsSubscriptionToAllTagsAvailableOption.IsSet)
                writer.WriteBoolean("isSubscriptionToAllTagsAvailable", apiFeatureFlags.IsSubscriptionToAllTagsAvailableOption.Value.Value);
        }
    }
}
