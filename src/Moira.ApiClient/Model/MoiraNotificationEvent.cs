// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraNotificationEvent
    /// </summary>
    public partial class MoiraNotificationEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraNotificationEvent" /> class.
        /// </summary>
        /// <param name="contactId">contactId</param>
        /// <param name="eventMessage">eventMessage</param>
        /// <param name="metric">metric</param>
        /// <param name="msg">msg</param>
        /// <param name="oldState">oldState</param>
        /// <param name="state">state</param>
        /// <param name="subId">subId</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="triggerEvent">triggerEvent</param>
        /// <param name="triggerId">triggerId</param>
        /// <param name="value">value</param>
        /// <param name="values">values</param>
        [JsonConstructor]
        public MoiraNotificationEvent(Option<string> contactId = default, Option<MoiraEventInfo> eventMessage = default, Option<string> metric = default, Option<string> msg = default, Option<string> oldState = default, Option<string> state = default, Option<string> subId = default, Option<long?> timestamp = default, Option<bool?> triggerEvent = default, Option<string> triggerId = default, Option<decimal?> value = default, Option<Dictionary<string, decimal>> values = default)
        {
            ContactIdOption = contactId;
            EventMessageOption = eventMessage;
            MetricOption = metric;
            MsgOption = msg;
            OldStateOption = oldState;
            StateOption = state;
            SubIdOption = subId;
            TimestampOption = timestamp;
            TriggerEventOption = triggerEvent;
            TriggerIdOption = triggerId;
            ValueOption = value;
            ValuesOption = values;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ContactId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContactIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactId
        /// </summary>
        [JsonPropertyName("contact_id")]
        public string ContactId { get { return this.ContactIdOption; } set { this.ContactIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of EventMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraEventInfo> EventMessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets EventMessage
        /// </summary>
        [JsonPropertyName("event_message")]
        public MoiraEventInfo EventMessage { get { return this.EventMessageOption; } set { this.EventMessageOption = new Option<MoiraEventInfo>(value); } }

        /// <summary>
        /// Used to track the state of Metric
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MetricOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metric
        /// </summary>
        /* <example>carbon.agents.*.metricsReceived</example> */
        [JsonPropertyName("metric")]
        public string Metric { get { return this.MetricOption; } set { this.MetricOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Msg
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MsgOption { get; private set; }

        /// <summary>
        /// Gets or Sets Msg
        /// </summary>
        [JsonPropertyName("msg")]
        public string Msg { get { return this.MsgOption; } set { this.MsgOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of OldState
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> OldStateOption { get; private set; }

        /// <summary>
        /// Gets or Sets OldState
        /// </summary>
        /* <example>ERROR</example> */
        [JsonPropertyName("old_state")]
        public string OldState { get { return this.OldStateOption; } set { this.OldStateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /* <example>OK</example> */
        [JsonPropertyName("state")]
        public string State { get { return this.StateOption; } set { this.StateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of SubId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SubIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SubId
        /// </summary>
        [JsonPropertyName("sub_id")]
        public string SubId { get { return this.SubIdOption; } set { this.SubIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        /* <example>1590741878</example> */
        [JsonPropertyName("timestamp")]
        public long? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TriggerEvent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TriggerEventOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerEvent
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("trigger_event")]
        public bool? TriggerEvent { get { return this.TriggerEventOption; } set { this.TriggerEventOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TriggerId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerId
        /// </summary>
        /* <example>5ff37996-8927-4cab-8987-970e80d8e0a8</example> */
        [JsonPropertyName("trigger_id")]
        public string TriggerId { get { return this.TriggerIdOption; } set { this.TriggerIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        /* <example>70</example> */
        [JsonPropertyName("value")]
        public decimal? Value { get { return this.ValueOption; } set { this.ValueOption = new Option<decimal?>(value); } }

        /// <summary>
        /// Used to track the state of Values
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, decimal>> ValuesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [JsonPropertyName("values")]
        public Dictionary<string, decimal> Values { get { return this.ValuesOption; } set { this.ValuesOption = new Option<Dictionary<string, decimal>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraNotificationEvent {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  EventMessage: ").Append(EventMessage).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  OldState: ").Append(OldState).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubId: ").Append(SubId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TriggerEvent: ").Append(TriggerEvent).Append("\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraNotificationEvent" />
    /// </summary>
    public class MoiraNotificationEventJsonConverter : JsonConverter<MoiraNotificationEvent>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraNotificationEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraNotificationEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> contactId = default;
            Option<MoiraEventInfo> eventMessage = default;
            Option<string> metric = default;
            Option<string> msg = default;
            Option<string> oldState = default;
            Option<string> state = default;
            Option<string> subId = default;
            Option<long?> timestamp = default;
            Option<bool?> triggerEvent = default;
            Option<string> triggerId = default;
            Option<decimal?> value = default;
            Option<Dictionary<string, decimal>> values = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contact_id":
                            contactId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "event_message":
                            eventMessage = new Option<MoiraEventInfo>(JsonSerializer.Deserialize<MoiraEventInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metric":
                            metric = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "msg":
                            msg = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "old_state":
                            oldState = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sub_id":
                            subId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "trigger_event":
                            triggerEvent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "trigger_id":
                            triggerId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "values":
                            values = new Option<Dictionary<string, decimal>>(JsonSerializer.Deserialize<Dictionary<string, decimal>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contactId.IsSet && contactId.Value == null)
                throw new ArgumentNullException(nameof(contactId), "Property is not nullable for class MoiraNotificationEvent.");

            if (metric.IsSet && metric.Value == null)
                throw new ArgumentNullException(nameof(metric), "Property is not nullable for class MoiraNotificationEvent.");

            if (oldState.IsSet && oldState.Value == null)
                throw new ArgumentNullException(nameof(oldState), "Property is not nullable for class MoiraNotificationEvent.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class MoiraNotificationEvent.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class MoiraNotificationEvent.");

            if (triggerEvent.IsSet && triggerEvent.Value == null)
                throw new ArgumentNullException(nameof(triggerEvent), "Property is not nullable for class MoiraNotificationEvent.");

            if (triggerId.IsSet && triggerId.Value == null)
                throw new ArgumentNullException(nameof(triggerId), "Property is not nullable for class MoiraNotificationEvent.");

            if (values.IsSet && values.Value == null)
                throw new ArgumentNullException(nameof(values), "Property is not nullable for class MoiraNotificationEvent.");

            return new MoiraNotificationEvent(contactId, eventMessage, metric, msg, oldState, state, subId, timestamp, triggerEvent, triggerId, value, values);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraNotificationEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraNotificationEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraNotificationEvent moiraNotificationEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraNotificationEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraNotificationEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraNotificationEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraNotificationEvent moiraNotificationEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraNotificationEvent.ContactIdOption.IsSet && moiraNotificationEvent.ContactId == null)
                throw new ArgumentNullException(nameof(moiraNotificationEvent.ContactId), "Property is required for class MoiraNotificationEvent.");

            if (moiraNotificationEvent.MetricOption.IsSet && moiraNotificationEvent.Metric == null)
                throw new ArgumentNullException(nameof(moiraNotificationEvent.Metric), "Property is required for class MoiraNotificationEvent.");

            if (moiraNotificationEvent.OldStateOption.IsSet && moiraNotificationEvent.OldState == null)
                throw new ArgumentNullException(nameof(moiraNotificationEvent.OldState), "Property is required for class MoiraNotificationEvent.");

            if (moiraNotificationEvent.StateOption.IsSet && moiraNotificationEvent.State == null)
                throw new ArgumentNullException(nameof(moiraNotificationEvent.State), "Property is required for class MoiraNotificationEvent.");

            if (moiraNotificationEvent.TriggerIdOption.IsSet && moiraNotificationEvent.TriggerId == null)
                throw new ArgumentNullException(nameof(moiraNotificationEvent.TriggerId), "Property is required for class MoiraNotificationEvent.");

            if (moiraNotificationEvent.ValuesOption.IsSet && moiraNotificationEvent.Values == null)
                throw new ArgumentNullException(nameof(moiraNotificationEvent.Values), "Property is required for class MoiraNotificationEvent.");

            if (moiraNotificationEvent.ContactIdOption.IsSet)
                writer.WriteString("contact_id", moiraNotificationEvent.ContactId);

            if (moiraNotificationEvent.EventMessageOption.IsSet)
                if (moiraNotificationEvent.EventMessageOption.Value != null)
                {
                    writer.WritePropertyName("event_message");
                    JsonSerializer.Serialize(writer, moiraNotificationEvent.EventMessage, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("event_message");
            if (moiraNotificationEvent.MetricOption.IsSet)
                writer.WriteString("metric", moiraNotificationEvent.Metric);

            if (moiraNotificationEvent.MsgOption.IsSet)
                if (moiraNotificationEvent.MsgOption.Value != null)
                    writer.WriteString("msg", moiraNotificationEvent.Msg);
                else
                    writer.WriteNull("msg");

            if (moiraNotificationEvent.OldStateOption.IsSet)
                writer.WriteString("old_state", moiraNotificationEvent.OldState);

            if (moiraNotificationEvent.StateOption.IsSet)
                writer.WriteString("state", moiraNotificationEvent.State);

            if (moiraNotificationEvent.SubIdOption.IsSet)
                if (moiraNotificationEvent.SubIdOption.Value != null)
                    writer.WriteString("sub_id", moiraNotificationEvent.SubId);
                else
                    writer.WriteNull("sub_id");

            if (moiraNotificationEvent.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", moiraNotificationEvent.TimestampOption.Value.Value);

            if (moiraNotificationEvent.TriggerEventOption.IsSet)
                writer.WriteBoolean("trigger_event", moiraNotificationEvent.TriggerEventOption.Value.Value);

            if (moiraNotificationEvent.TriggerIdOption.IsSet)
                writer.WriteString("trigger_id", moiraNotificationEvent.TriggerId);

            if (moiraNotificationEvent.ValueOption.IsSet)
                if (moiraNotificationEvent.ValueOption.Value != null)
                    writer.WriteNumber("value", moiraNotificationEvent.ValueOption.Value.Value);
                else
                    writer.WriteNull("value");

            if (moiraNotificationEvent.ValuesOption.IsSet)
            {
                writer.WritePropertyName("values");
                JsonSerializer.Serialize(writer, moiraNotificationEvent.Values, jsonSerializerOptions);
            }
        }
    }
}
