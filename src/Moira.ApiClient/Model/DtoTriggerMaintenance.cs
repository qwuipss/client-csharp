// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTriggerMaintenance
    /// </summary>
    public partial class DtoTriggerMaintenance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTriggerMaintenance" /> class.
        /// </summary>
        /// <param name="metrics">metrics</param>
        /// <param name="trigger">trigger</param>
        [JsonConstructor]
        public DtoTriggerMaintenance(Option<Dictionary<string, int>> metrics = default, Option<long?> trigger = default)
        {
            MetricsOption = metrics;
            TriggerOption = trigger;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Metrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, int>> MetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [JsonPropertyName("metrics")]
        public Dictionary<string, int> Metrics { get { return this.MetricsOption; } set { this.MetricsOption = new Option<Dictionary<string, int>>(value); } }

        /// <summary>
        /// Used to track the state of Trigger
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TriggerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        /* <example>1594225165</example> */
        [JsonPropertyName("trigger")]
        public long? Trigger { get { return this.TriggerOption; } set { this.TriggerOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTriggerMaintenance {\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTriggerMaintenance" />
    /// </summary>
    public class DtoTriggerMaintenanceJsonConverter : JsonConverter<DtoTriggerMaintenance>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTriggerMaintenance" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTriggerMaintenance Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Dictionary<string, int>> metrics = default;
            Option<long?> trigger = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "metrics":
                            metrics = new Option<Dictionary<string, int>>(JsonSerializer.Deserialize<Dictionary<string, int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trigger":
                            trigger = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (metrics.IsSet && metrics.Value == null)
                throw new ArgumentNullException(nameof(metrics), "Property is not nullable for class DtoTriggerMaintenance.");

            return new DtoTriggerMaintenance(metrics, trigger);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTriggerMaintenance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTriggerMaintenance dtoTriggerMaintenance, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTriggerMaintenance, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTriggerMaintenance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTriggerMaintenance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTriggerMaintenance dtoTriggerMaintenance, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTriggerMaintenance.MetricsOption.IsSet && dtoTriggerMaintenance.Metrics == null)
                throw new ArgumentNullException(nameof(dtoTriggerMaintenance.Metrics), "Property is required for class DtoTriggerMaintenance.");

            if (dtoTriggerMaintenance.MetricsOption.IsSet)
            {
                writer.WritePropertyName("metrics");
                JsonSerializer.Serialize(writer, dtoTriggerMaintenance.Metrics, jsonSerializerOptions);
            }
            if (dtoTriggerMaintenance.TriggerOption.IsSet)
                if (dtoTriggerMaintenance.TriggerOption.Value != null)
                    writer.WriteNumber("trigger", dtoTriggerMaintenance.TriggerOption.Value.Value);
                else
                    writer.WriteNull("trigger");
        }
    }
}
