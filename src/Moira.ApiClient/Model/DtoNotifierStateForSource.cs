// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoNotifierStateForSource
    /// </summary>
    public partial class DtoNotifierStateForSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoNotifierStateForSource" /> class.
        /// </summary>
        /// <param name="actor">actor</param>
        /// <param name="clusterId">clusterId</param>
        /// <param name="message">message</param>
        /// <param name="state">state</param>
        /// <param name="triggerSource">triggerSource</param>
        [JsonConstructor]
        public DtoNotifierStateForSource(Option<string> actor = default, Option<string> clusterId = default, Option<string> message = default, Option<string> state = default, Option<string> triggerSource = default)
        {
            ActorOption = actor;
            ClusterIdOption = clusterId;
            MessageOption = message;
            StateOption = state;
            TriggerSourceOption = triggerSource;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Actor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ActorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        /* <example>AUTO</example> */
        [JsonPropertyName("actor")]
        public string Actor { get { return this.ActorOption; } set { this.ActorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ClusterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClusterIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        [JsonPropertyName("cluster_id")]
        public string ClusterId { get { return this.ClusterIdOption; } set { this.ClusterIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        /* <example>Moira has been turned off for maintenance</example> */
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /* <example>ERROR</example> */
        [JsonPropertyName("state")]
        public string State { get { return this.StateOption; } set { this.StateOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TriggerSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerSource
        /// </summary>
        [JsonPropertyName("trigger_source")]
        public string TriggerSource { get { return this.TriggerSourceOption; } set { this.TriggerSourceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoNotifierStateForSource {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  TriggerSource: ").Append(TriggerSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoNotifierStateForSource" />
    /// </summary>
    public class DtoNotifierStateForSourceJsonConverter : JsonConverter<DtoNotifierStateForSource>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoNotifierStateForSource" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoNotifierStateForSource Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> actor = default;
            Option<string> clusterId = default;
            Option<string> message = default;
            Option<string> state = default;
            Option<string> triggerSource = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actor":
                            actor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cluster_id":
                            clusterId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "trigger_source":
                            triggerSource = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (actor.IsSet && actor.Value == null)
                throw new ArgumentNullException(nameof(actor), "Property is not nullable for class DtoNotifierStateForSource.");

            if (clusterId.IsSet && clusterId.Value == null)
                throw new ArgumentNullException(nameof(clusterId), "Property is not nullable for class DtoNotifierStateForSource.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class DtoNotifierStateForSource.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class DtoNotifierStateForSource.");

            if (triggerSource.IsSet && triggerSource.Value == null)
                throw new ArgumentNullException(nameof(triggerSource), "Property is not nullable for class DtoNotifierStateForSource.");

            return new DtoNotifierStateForSource(actor, clusterId, message, state, triggerSource);
        }

        /// <summary>
        /// Serializes a <see cref="DtoNotifierStateForSource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoNotifierStateForSource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoNotifierStateForSource dtoNotifierStateForSource, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoNotifierStateForSource, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoNotifierStateForSource" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoNotifierStateForSource"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoNotifierStateForSource dtoNotifierStateForSource, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoNotifierStateForSource.ActorOption.IsSet && dtoNotifierStateForSource.Actor == null)
                throw new ArgumentNullException(nameof(dtoNotifierStateForSource.Actor), "Property is required for class DtoNotifierStateForSource.");

            if (dtoNotifierStateForSource.ClusterIdOption.IsSet && dtoNotifierStateForSource.ClusterId == null)
                throw new ArgumentNullException(nameof(dtoNotifierStateForSource.ClusterId), "Property is required for class DtoNotifierStateForSource.");

            if (dtoNotifierStateForSource.MessageOption.IsSet && dtoNotifierStateForSource.Message == null)
                throw new ArgumentNullException(nameof(dtoNotifierStateForSource.Message), "Property is required for class DtoNotifierStateForSource.");

            if (dtoNotifierStateForSource.StateOption.IsSet && dtoNotifierStateForSource.State == null)
                throw new ArgumentNullException(nameof(dtoNotifierStateForSource.State), "Property is required for class DtoNotifierStateForSource.");

            if (dtoNotifierStateForSource.TriggerSourceOption.IsSet && dtoNotifierStateForSource.TriggerSource == null)
                throw new ArgumentNullException(nameof(dtoNotifierStateForSource.TriggerSource), "Property is required for class DtoNotifierStateForSource.");

            if (dtoNotifierStateForSource.ActorOption.IsSet)
                writer.WriteString("actor", dtoNotifierStateForSource.Actor);

            if (dtoNotifierStateForSource.ClusterIdOption.IsSet)
                writer.WriteString("cluster_id", dtoNotifierStateForSource.ClusterId);

            if (dtoNotifierStateForSource.MessageOption.IsSet)
                writer.WriteString("message", dtoNotifierStateForSource.Message);

            if (dtoNotifierStateForSource.StateOption.IsSet)
                writer.WriteString("state", dtoNotifierStateForSource.State);

            if (dtoNotifierStateForSource.TriggerSourceOption.IsSet)
                writer.WriteString("trigger_source", dtoNotifierStateForSource.TriggerSource);
        }
    }
}
