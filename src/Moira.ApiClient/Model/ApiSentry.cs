// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// ApiSentry
    /// </summary>
    public partial class ApiSentry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSentry" /> class.
        /// </summary>
        /// <param name="dsn">dsn</param>
        /// <param name="platform">platform</param>
        [JsonConstructor]
        public ApiSentry(Option<string> dsn = default, Option<string> platform = default)
        {
            DsnOption = dsn;
            PlatformOption = platform;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Dsn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DsnOption { get; private set; }

        /// <summary>
        /// Gets or Sets Dsn
        /// </summary>
        /* <example>https://secret@sentry.host</example> */
        [JsonPropertyName("dsn")]
        public string Dsn { get { return this.DsnOption; } set { this.DsnOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Platform
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PlatformOption { get; private set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        /* <example>dev</example> */
        [JsonPropertyName("platform")]
        public string Platform { get { return this.PlatformOption; } set { this.PlatformOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiSentry {\n");
            sb.Append("  Dsn: ").Append(Dsn).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiSentry" />
    /// </summary>
    public class ApiSentryJsonConverter : JsonConverter<ApiSentry>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiSentry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiSentry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> dsn = default;
            Option<string> platform = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dsn":
                            dsn = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "platform":
                            platform = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (dsn.IsSet && dsn.Value == null)
                throw new ArgumentNullException(nameof(dsn), "Property is not nullable for class ApiSentry.");

            if (platform.IsSet && platform.Value == null)
                throw new ArgumentNullException(nameof(platform), "Property is not nullable for class ApiSentry.");

            return new ApiSentry(dsn, platform);
        }

        /// <summary>
        /// Serializes a <see cref="ApiSentry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiSentry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiSentry apiSentry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiSentry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiSentry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiSentry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiSentry apiSentry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiSentry.DsnOption.IsSet && apiSentry.Dsn == null)
                throw new ArgumentNullException(nameof(apiSentry.Dsn), "Property is required for class ApiSentry.");

            if (apiSentry.PlatformOption.IsSet && apiSentry.Platform == null)
                throw new ArgumentNullException(nameof(apiSentry.Platform), "Property is required for class ApiSentry.");

            if (apiSentry.DsnOption.IsSet)
                writer.WriteString("dsn", apiSentry.Dsn);

            if (apiSentry.PlatformOption.IsSet)
                writer.WriteString("platform", apiSentry.Platform);
        }
    }
}
