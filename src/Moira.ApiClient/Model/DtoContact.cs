// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoContact
    /// </summary>
    public partial class DtoContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoContact" /> class.
        /// </summary>
        /// <param name="extraMessage">extraMessage</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="teamId">teamId</param>
        /// <param name="type">type</param>
        /// <param name="user">user</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public DtoContact(Option<string> extraMessage = default, Option<string> id = default, Option<string> name = default, Option<string> teamId = default, Option<string> type = default, Option<string> user = default, Option<string> value = default)
        {
            ExtraMessageOption = extraMessage;
            IdOption = id;
            NameOption = name;
            TeamIdOption = teamId;
            TypeOption = type;
            UserOption = user;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ExtraMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ExtraMessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExtraMessage
        /// </summary>
        [JsonPropertyName("extra_message")]
        public string ExtraMessage { get { return this.ExtraMessageOption; } set { this.ExtraMessageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /* <example>1dd38765-c5be-418d-81fa-7a5f879c2315</example> */
        [JsonPropertyName("id")]
        public string Id { get { return this.IdOption; } set { this.IdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /* <example>Mail Alerts</example> */
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of TeamId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TeamIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TeamId
        /// </summary>
        [JsonPropertyName("team_id")]
        public string TeamId { get { return this.TeamIdOption; } set { this.TeamIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /* <example>mail</example> */
        [JsonPropertyName("type")]
        public string Type { get { return this.TypeOption; } set { this.TypeOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of User
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UserOption { get; private set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [JsonPropertyName("user")]
        public string User { get { return this.UserOption; } set { this.UserOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        /* <example>devops@example.com</example> */
        [JsonPropertyName("value")]
        public string Value { get { return this.ValueOption; } set { this.ValueOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoContact {\n");
            sb.Append("  ExtraMessage: ").Append(ExtraMessage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoContact" />
    /// </summary>
    public class DtoContactJsonConverter : JsonConverter<DtoContact>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoContact" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoContact Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> extraMessage = default;
            Option<string> id = default;
            Option<string> name = default;
            Option<string> teamId = default;
            Option<string> type = default;
            Option<string> user = default;
            Option<string> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "extra_message":
                            extraMessage = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "team_id":
                            teamId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "user":
                            user = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (extraMessage.IsSet && extraMessage.Value == null)
                throw new ArgumentNullException(nameof(extraMessage), "Property is not nullable for class DtoContact.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class DtoContact.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class DtoContact.");

            if (teamId.IsSet && teamId.Value == null)
                throw new ArgumentNullException(nameof(teamId), "Property is not nullable for class DtoContact.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class DtoContact.");

            if (user.IsSet && user.Value == null)
                throw new ArgumentNullException(nameof(user), "Property is not nullable for class DtoContact.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class DtoContact.");

            return new DtoContact(extraMessage, id, name, teamId, type, user, value);
        }

        /// <summary>
        /// Serializes a <see cref="DtoContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoContact dtoContact, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoContact, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoContact" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoContact"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoContact dtoContact, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoContact.ExtraMessageOption.IsSet && dtoContact.ExtraMessage == null)
                throw new ArgumentNullException(nameof(dtoContact.ExtraMessage), "Property is required for class DtoContact.");

            if (dtoContact.IdOption.IsSet && dtoContact.Id == null)
                throw new ArgumentNullException(nameof(dtoContact.Id), "Property is required for class DtoContact.");

            if (dtoContact.NameOption.IsSet && dtoContact.Name == null)
                throw new ArgumentNullException(nameof(dtoContact.Name), "Property is required for class DtoContact.");

            if (dtoContact.TeamIdOption.IsSet && dtoContact.TeamId == null)
                throw new ArgumentNullException(nameof(dtoContact.TeamId), "Property is required for class DtoContact.");

            if (dtoContact.TypeOption.IsSet && dtoContact.Type == null)
                throw new ArgumentNullException(nameof(dtoContact.Type), "Property is required for class DtoContact.");

            if (dtoContact.UserOption.IsSet && dtoContact.User == null)
                throw new ArgumentNullException(nameof(dtoContact.User), "Property is required for class DtoContact.");

            if (dtoContact.ValueOption.IsSet && dtoContact.Value == null)
                throw new ArgumentNullException(nameof(dtoContact.Value), "Property is required for class DtoContact.");

            if (dtoContact.ExtraMessageOption.IsSet)
                writer.WriteString("extra_message", dtoContact.ExtraMessage);

            if (dtoContact.IdOption.IsSet)
                writer.WriteString("id", dtoContact.Id);

            if (dtoContact.NameOption.IsSet)
                writer.WriteString("name", dtoContact.Name);

            if (dtoContact.TeamIdOption.IsSet)
                writer.WriteString("team_id", dtoContact.TeamId);

            if (dtoContact.TypeOption.IsSet)
                writer.WriteString("type", dtoContact.Type);

            if (dtoContact.UserOption.IsSet)
                writer.WriteString("user", dtoContact.User);

            if (dtoContact.ValueOption.IsSet)
                writer.WriteString("value", dtoContact.Value);
        }
    }
}
