// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// ApiMetricSourceCluster
    /// </summary>
    public partial class ApiMetricSourceCluster : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiMetricSourceCluster" /> class.
        /// </summary>
        /// <param name="clusterId">clusterId</param>
        /// <param name="clusterName">clusterName</param>
        /// <param name="metricsTtl">metricsTtl</param>
        /// <param name="triggerSource">triggerSource</param>
        [JsonConstructor]
        public ApiMetricSourceCluster(Option<string> clusterId = default, Option<string> clusterName = default, Option<int?> metricsTtl = default, Option<string> triggerSource = default)
        {
            ClusterIdOption = clusterId;
            ClusterNameOption = clusterName;
            MetricsTtlOption = metricsTtl;
            TriggerSourceOption = triggerSource;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ClusterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClusterIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterId
        /// </summary>
        /* <example>default</example> */
        [JsonPropertyName("cluster_id")]
        public string ClusterId { get { return this.ClusterIdOption; } set { this.ClusterIdOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ClusterName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClusterNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClusterName
        /// </summary>
        /* <example>Graphite Remote Prod</example> */
        [JsonPropertyName("cluster_name")]
        public string ClusterName { get { return this.ClusterNameOption; } set { this.ClusterNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of MetricsTtl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MetricsTtlOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetricsTtl
        /// </summary>
        /* <example>604800</example> */
        [JsonPropertyName("metrics_ttl")]
        public int? MetricsTtl { get { return this.MetricsTtlOption; } set { this.MetricsTtlOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of TriggerSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TriggerSourceOption { get; private set; }

        /// <summary>
        /// Gets or Sets TriggerSource
        /// </summary>
        /* <example>graphite_remote</example> */
        [JsonPropertyName("trigger_source")]
        public string TriggerSource { get { return this.TriggerSourceOption; } set { this.TriggerSourceOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiMetricSourceCluster {\n");
            sb.Append("  ClusterId: ").Append(ClusterId).Append("\n");
            sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
            sb.Append("  MetricsTtl: ").Append(MetricsTtl).Append("\n");
            sb.Append("  TriggerSource: ").Append(TriggerSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiMetricSourceCluster" />
    /// </summary>
    public class ApiMetricSourceClusterJsonConverter : JsonConverter<ApiMetricSourceCluster>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiMetricSourceCluster" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiMetricSourceCluster Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> clusterId = default;
            Option<string> clusterName = default;
            Option<int?> metricsTtl = default;
            Option<string> triggerSource = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cluster_id":
                            clusterId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "cluster_name":
                            clusterName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "metrics_ttl":
                            metricsTtl = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "trigger_source":
                            triggerSource = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (clusterId.IsSet && clusterId.Value == null)
                throw new ArgumentNullException(nameof(clusterId), "Property is not nullable for class ApiMetricSourceCluster.");

            if (clusterName.IsSet && clusterName.Value == null)
                throw new ArgumentNullException(nameof(clusterName), "Property is not nullable for class ApiMetricSourceCluster.");

            if (metricsTtl.IsSet && metricsTtl.Value == null)
                throw new ArgumentNullException(nameof(metricsTtl), "Property is not nullable for class ApiMetricSourceCluster.");

            if (triggerSource.IsSet && triggerSource.Value == null)
                throw new ArgumentNullException(nameof(triggerSource), "Property is not nullable for class ApiMetricSourceCluster.");

            return new ApiMetricSourceCluster(clusterId, clusterName, metricsTtl, triggerSource);
        }

        /// <summary>
        /// Serializes a <see cref="ApiMetricSourceCluster" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiMetricSourceCluster"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiMetricSourceCluster apiMetricSourceCluster, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiMetricSourceCluster, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiMetricSourceCluster" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiMetricSourceCluster"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiMetricSourceCluster apiMetricSourceCluster, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiMetricSourceCluster.ClusterIdOption.IsSet && apiMetricSourceCluster.ClusterId == null)
                throw new ArgumentNullException(nameof(apiMetricSourceCluster.ClusterId), "Property is required for class ApiMetricSourceCluster.");

            if (apiMetricSourceCluster.ClusterNameOption.IsSet && apiMetricSourceCluster.ClusterName == null)
                throw new ArgumentNullException(nameof(apiMetricSourceCluster.ClusterName), "Property is required for class ApiMetricSourceCluster.");

            if (apiMetricSourceCluster.TriggerSourceOption.IsSet && apiMetricSourceCluster.TriggerSource == null)
                throw new ArgumentNullException(nameof(apiMetricSourceCluster.TriggerSource), "Property is required for class ApiMetricSourceCluster.");

            if (apiMetricSourceCluster.ClusterIdOption.IsSet)
                writer.WriteString("cluster_id", apiMetricSourceCluster.ClusterId);

            if (apiMetricSourceCluster.ClusterNameOption.IsSet)
                writer.WriteString("cluster_name", apiMetricSourceCluster.ClusterName);

            if (apiMetricSourceCluster.MetricsTtlOption.IsSet)
                writer.WriteNumber("metrics_ttl", apiMetricSourceCluster.MetricsTtlOption.Value.Value);

            if (apiMetricSourceCluster.TriggerSourceOption.IsSet)
                writer.WriteString("trigger_source", apiMetricSourceCluster.TriggerSource);
        }
    }
}
