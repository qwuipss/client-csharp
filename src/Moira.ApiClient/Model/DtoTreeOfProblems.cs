// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoTreeOfProblems
    /// </summary>
    public partial class DtoTreeOfProblems : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoTreeOfProblems" /> class.
        /// </summary>
        /// <param name="syntaxOk">syntaxOk</param>
        /// <param name="treeOfProblems">treeOfProblems</param>
        [JsonConstructor]
        public DtoTreeOfProblems(Option<bool?> syntaxOk = default, Option<DtoProblemOfTarget> treeOfProblems = default)
        {
            SyntaxOkOption = syntaxOk;
            TreeOfProblemsOption = treeOfProblems;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of SyntaxOk
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SyntaxOkOption { get; private set; }

        /// <summary>
        /// Gets or Sets SyntaxOk
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("syntax_ok")]
        public bool? SyntaxOk { get { return this.SyntaxOkOption; } set { this.SyntaxOkOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of TreeOfProblems
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DtoProblemOfTarget> TreeOfProblemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TreeOfProblems
        /// </summary>
        [JsonPropertyName("tree_of_problems")]
        public DtoProblemOfTarget TreeOfProblems { get { return this.TreeOfProblemsOption; } set { this.TreeOfProblemsOption = new Option<DtoProblemOfTarget>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoTreeOfProblems {\n");
            sb.Append("  SyntaxOk: ").Append(SyntaxOk).Append("\n");
            sb.Append("  TreeOfProblems: ").Append(TreeOfProblems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoTreeOfProblems" />
    /// </summary>
    public class DtoTreeOfProblemsJsonConverter : JsonConverter<DtoTreeOfProblems>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoTreeOfProblems" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoTreeOfProblems Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> syntaxOk = default;
            Option<DtoProblemOfTarget> treeOfProblems = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "syntax_ok":
                            syntaxOk = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "tree_of_problems":
                            treeOfProblems = new Option<DtoProblemOfTarget>(JsonSerializer.Deserialize<DtoProblemOfTarget>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (syntaxOk.IsSet && syntaxOk.Value == null)
                throw new ArgumentNullException(nameof(syntaxOk), "Property is not nullable for class DtoTreeOfProblems.");

            return new DtoTreeOfProblems(syntaxOk, treeOfProblems);
        }

        /// <summary>
        /// Serializes a <see cref="DtoTreeOfProblems" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTreeOfProblems"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoTreeOfProblems dtoTreeOfProblems, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoTreeOfProblems, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoTreeOfProblems" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoTreeOfProblems"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoTreeOfProblems dtoTreeOfProblems, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoTreeOfProblems.SyntaxOkOption.IsSet)
                writer.WriteBoolean("syntax_ok", dtoTreeOfProblems.SyntaxOkOption.Value.Value);

            if (dtoTreeOfProblems.TreeOfProblemsOption.IsSet)
                if (dtoTreeOfProblems.TreeOfProblemsOption.Value != null)
                {
                    writer.WritePropertyName("tree_of_problems");
                    JsonSerializer.Serialize(writer, dtoTreeOfProblems.TreeOfProblems, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("tree_of_problems");
        }
    }
}
