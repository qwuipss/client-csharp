// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// DtoNotifierState
    /// </summary>
    public partial class DtoNotifierState : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DtoNotifierState" /> class.
        /// </summary>
        /// <param name="actor">actor</param>
        /// <param name="message">message</param>
        /// <param name="state">state</param>
        [JsonConstructor]
        public DtoNotifierState(Option<string> actor = default, Option<string> message = default, Option<string> state = default)
        {
            ActorOption = actor;
            MessageOption = message;
            StateOption = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Actor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ActorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        /* <example>AUTO</example> */
        [JsonPropertyName("actor")]
        public string Actor { get { return this.ActorOption; } set { this.ActorOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        /* <example>Moira has been turned off for maintenance</example> */
        [JsonPropertyName("message")]
        public string Message { get { return this.MessageOption; } set { this.MessageOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /* <example>ERROR</example> */
        [JsonPropertyName("state")]
        public string State { get { return this.StateOption; } set { this.StateOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DtoNotifierState {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DtoNotifierState" />
    /// </summary>
    public class DtoNotifierStateJsonConverter : JsonConverter<DtoNotifierState>
    {
        /// <summary>
        /// Deserializes json to <see cref="DtoNotifierState" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DtoNotifierState Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> actor = default;
            Option<string> message = default;
            Option<string> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actor":
                            actor = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (actor.IsSet && actor.Value == null)
                throw new ArgumentNullException(nameof(actor), "Property is not nullable for class DtoNotifierState.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class DtoNotifierState.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class DtoNotifierState.");

            return new DtoNotifierState(actor, message, state);
        }

        /// <summary>
        /// Serializes a <see cref="DtoNotifierState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoNotifierState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DtoNotifierState dtoNotifierState, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dtoNotifierState, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DtoNotifierState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dtoNotifierState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DtoNotifierState dtoNotifierState, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dtoNotifierState.ActorOption.IsSet && dtoNotifierState.Actor == null)
                throw new ArgumentNullException(nameof(dtoNotifierState.Actor), "Property is required for class DtoNotifierState.");

            if (dtoNotifierState.MessageOption.IsSet && dtoNotifierState.Message == null)
                throw new ArgumentNullException(nameof(dtoNotifierState.Message), "Property is required for class DtoNotifierState.");

            if (dtoNotifierState.StateOption.IsSet && dtoNotifierState.State == null)
                throw new ArgumentNullException(nameof(dtoNotifierState.State), "Property is required for class DtoNotifierState.");

            if (dtoNotifierState.ActorOption.IsSet)
                writer.WriteString("actor", dtoNotifierState.Actor);

            if (dtoNotifierState.MessageOption.IsSet)
                writer.WriteString("message", dtoNotifierState.Message);

            if (dtoNotifierState.StateOption.IsSet)
                writer.WriteString("state", dtoNotifierState.State);
        }
    }
}
