// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// MoiraScheduledNotification
    /// </summary>
    public partial class MoiraScheduledNotification : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraScheduledNotification" /> class.
        /// </summary>
        /// <param name="contact">contact</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="event">event</param>
        /// <param name="plotting">plotting</param>
        /// <param name="sendFail">sendFail</param>
        /// <param name="throttled">throttled</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="trigger">trigger</param>
        [JsonConstructor]
        public MoiraScheduledNotification(Option<MoiraContactData> contact = default, Option<long?> createdAt = default, Option<MoiraNotificationEvent> @event = default, Option<MoiraPlottingData> plotting = default, Option<int?> sendFail = default, Option<bool?> throttled = default, Option<long?> timestamp = default, Option<MoiraTriggerData> trigger = default)
        {
            ContactOption = contact;
            CreatedAtOption = createdAt;
            EventOption = @event;
            PlottingOption = plotting;
            SendFailOption = sendFail;
            ThrottledOption = throttled;
            TimestampOption = timestamp;
            TriggerOption = trigger;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Contact
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraContactData> ContactOption { get; private set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [JsonPropertyName("contact")]
        public MoiraContactData Contact { get { return this.ContactOption; } set { this.ContactOption = new Option<MoiraContactData>(value); } }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /* <example>1594471900</example> */
        [JsonPropertyName("created_at")]
        public long? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Event
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraNotificationEvent> EventOption { get; private set; }

        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [JsonPropertyName("event")]
        public MoiraNotificationEvent Event { get { return this.EventOption; } set { this.EventOption = new Option<MoiraNotificationEvent>(value); } }

        /// <summary>
        /// Used to track the state of Plotting
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraPlottingData> PlottingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Plotting
        /// </summary>
        [JsonPropertyName("plotting")]
        public MoiraPlottingData Plotting { get { return this.PlottingOption; } set { this.PlottingOption = new Option<MoiraPlottingData>(value); } }

        /// <summary>
        /// Used to track the state of SendFail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SendFailOption { get; private set; }

        /// <summary>
        /// Gets or Sets SendFail
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("send_fail")]
        public int? SendFail { get { return this.SendFailOption; } set { this.SendFailOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Throttled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ThrottledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Throttled
        /// </summary>
        /* <example>false</example> */
        [JsonPropertyName("throttled")]
        public bool? Throttled { get { return this.ThrottledOption; } set { this.ThrottledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        /* <example>1594471927</example> */
        [JsonPropertyName("timestamp")]
        public long? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of Trigger
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MoiraTriggerData> TriggerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Trigger
        /// </summary>
        [JsonPropertyName("trigger")]
        public MoiraTriggerData Trigger { get { return this.TriggerOption; } set { this.TriggerOption = new Option<MoiraTriggerData>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraScheduledNotification {\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Plotting: ").Append(Plotting).Append("\n");
            sb.Append("  SendFail: ").Append(SendFail).Append("\n");
            sb.Append("  Throttled: ").Append(Throttled).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraScheduledNotification" />
    /// </summary>
    public class MoiraScheduledNotificationJsonConverter : JsonConverter<MoiraScheduledNotification>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraScheduledNotification" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraScheduledNotification Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<MoiraContactData> contact = default;
            Option<long?> createdAt = default;
            Option<MoiraNotificationEvent> varEvent = default;
            Option<MoiraPlottingData> plotting = default;
            Option<int?> sendFail = default;
            Option<bool?> throttled = default;
            Option<long?> timestamp = default;
            Option<MoiraTriggerData> trigger = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contact":
                            contact = new Option<MoiraContactData>(JsonSerializer.Deserialize<MoiraContactData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "created_at":
                            createdAt = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "event":
                            varEvent = new Option<MoiraNotificationEvent>(JsonSerializer.Deserialize<MoiraNotificationEvent>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "plotting":
                            plotting = new Option<MoiraPlottingData>(JsonSerializer.Deserialize<MoiraPlottingData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "send_fail":
                            sendFail = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "throttled":
                            throttled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "timestamp":
                            timestamp = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "trigger":
                            trigger = new Option<MoiraTriggerData>(JsonSerializer.Deserialize<MoiraTriggerData>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contact.IsSet && contact.Value == null)
                throw new ArgumentNullException(nameof(contact), "Property is not nullable for class MoiraScheduledNotification.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class MoiraScheduledNotification.");

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent), "Property is not nullable for class MoiraScheduledNotification.");

            if (plotting.IsSet && plotting.Value == null)
                throw new ArgumentNullException(nameof(plotting), "Property is not nullable for class MoiraScheduledNotification.");

            if (sendFail.IsSet && sendFail.Value == null)
                throw new ArgumentNullException(nameof(sendFail), "Property is not nullable for class MoiraScheduledNotification.");

            if (throttled.IsSet && throttled.Value == null)
                throw new ArgumentNullException(nameof(throttled), "Property is not nullable for class MoiraScheduledNotification.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class MoiraScheduledNotification.");

            if (trigger.IsSet && trigger.Value == null)
                throw new ArgumentNullException(nameof(trigger), "Property is not nullable for class MoiraScheduledNotification.");

            return new MoiraScheduledNotification(contact, createdAt, varEvent, plotting, sendFail, throttled, timestamp, trigger);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraScheduledNotification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraScheduledNotification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraScheduledNotification moiraScheduledNotification, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraScheduledNotification, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraScheduledNotification" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraScheduledNotification"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraScheduledNotification moiraScheduledNotification, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraScheduledNotification.ContactOption.IsSet && moiraScheduledNotification.Contact == null)
                throw new ArgumentNullException(nameof(moiraScheduledNotification.Contact), "Property is required for class MoiraScheduledNotification.");

            if (moiraScheduledNotification.EventOption.IsSet && moiraScheduledNotification.Event == null)
                throw new ArgumentNullException(nameof(moiraScheduledNotification.Event), "Property is required for class MoiraScheduledNotification.");

            if (moiraScheduledNotification.PlottingOption.IsSet && moiraScheduledNotification.Plotting == null)
                throw new ArgumentNullException(nameof(moiraScheduledNotification.Plotting), "Property is required for class MoiraScheduledNotification.");

            if (moiraScheduledNotification.TriggerOption.IsSet && moiraScheduledNotification.Trigger == null)
                throw new ArgumentNullException(nameof(moiraScheduledNotification.Trigger), "Property is required for class MoiraScheduledNotification.");

            if (moiraScheduledNotification.ContactOption.IsSet)
            {
                writer.WritePropertyName("contact");
                JsonSerializer.Serialize(writer, moiraScheduledNotification.Contact, jsonSerializerOptions);
            }
            if (moiraScheduledNotification.CreatedAtOption.IsSet)
                writer.WriteNumber("created_at", moiraScheduledNotification.CreatedAtOption.Value.Value);

            if (moiraScheduledNotification.EventOption.IsSet)
            {
                writer.WritePropertyName("event");
                JsonSerializer.Serialize(writer, moiraScheduledNotification.Event, jsonSerializerOptions);
            }
            if (moiraScheduledNotification.PlottingOption.IsSet)
            {
                writer.WritePropertyName("plotting");
                JsonSerializer.Serialize(writer, moiraScheduledNotification.Plotting, jsonSerializerOptions);
            }
            if (moiraScheduledNotification.SendFailOption.IsSet)
                writer.WriteNumber("send_fail", moiraScheduledNotification.SendFailOption.Value.Value);

            if (moiraScheduledNotification.ThrottledOption.IsSet)
                writer.WriteBoolean("throttled", moiraScheduledNotification.ThrottledOption.Value.Value);

            if (moiraScheduledNotification.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", moiraScheduledNotification.TimestampOption.Value.Value);

            if (moiraScheduledNotification.TriggerOption.IsSet)
            {
                writer.WritePropertyName("trigger");
                JsonSerializer.Serialize(writer, moiraScheduledNotification.Trigger, jsonSerializerOptions);
            }
        }
    }
}
