// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// Determines when Moira should monitor trigger
    /// </summary>
    public partial class MoiraScheduleData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MoiraScheduleData" /> class.
        /// </summary>
        /// <param name="days">days</param>
        /// <param name="endOffset">endOffset</param>
        /// <param name="startOffset">startOffset</param>
        /// <param name="tzOffset">tzOffset</param>
        [JsonConstructor]
        public MoiraScheduleData(Option<List<MoiraScheduleDataDay>> days = default, Option<long?> endOffset = default, Option<long?> startOffset = default, Option<long?> tzOffset = default)
        {
            DaysOption = days;
            EndOffsetOption = endOffset;
            StartOffsetOption = startOffset;
            TzOffsetOption = tzOffset;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Days
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<MoiraScheduleDataDay>> DaysOption { get; private set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [JsonPropertyName("days")]
        public List<MoiraScheduleDataDay> Days { get { return this.DaysOption; } set { this.DaysOption = new Option<List<MoiraScheduleDataDay>>(value); } }

        /// <summary>
        /// Used to track the state of EndOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> EndOffsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndOffset
        /// </summary>
        /* <example>1439</example> */
        [JsonPropertyName("endOffset")]
        public long? EndOffset { get { return this.EndOffsetOption; } set { this.EndOffsetOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of StartOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StartOffsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartOffset
        /// </summary>
        /* <example>0</example> */
        [JsonPropertyName("startOffset")]
        public long? StartOffset { get { return this.StartOffsetOption; } set { this.StartOffsetOption = new Option<long?>(value); } }

        /// <summary>
        /// Used to track the state of TzOffset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TzOffsetOption { get; private set; }

        /// <summary>
        /// Gets or Sets TzOffset
        /// </summary>
        /* <example>-60</example> */
        [JsonPropertyName("tzOffset")]
        public long? TzOffset { get { return this.TzOffsetOption; } set { this.TzOffsetOption = new Option<long?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MoiraScheduleData {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  EndOffset: ").Append(EndOffset).Append("\n");
            sb.Append("  StartOffset: ").Append(StartOffset).Append("\n");
            sb.Append("  TzOffset: ").Append(TzOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MoiraScheduleData" />
    /// </summary>
    public class MoiraScheduleDataJsonConverter : JsonConverter<MoiraScheduleData>
    {
        /// <summary>
        /// Deserializes json to <see cref="MoiraScheduleData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MoiraScheduleData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<MoiraScheduleDataDay>> days = default;
            Option<long?> endOffset = default;
            Option<long?> startOffset = default;
            Option<long?> tzOffset = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "days":
                            days = new Option<List<MoiraScheduleDataDay>>(JsonSerializer.Deserialize<List<MoiraScheduleDataDay>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "endOffset":
                            endOffset = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "startOffset":
                            startOffset = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        case "tzOffset":
                            tzOffset = new Option<long?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (long?)null : utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (days.IsSet && days.Value == null)
                throw new ArgumentNullException(nameof(days), "Property is not nullable for class MoiraScheduleData.");

            if (endOffset.IsSet && endOffset.Value == null)
                throw new ArgumentNullException(nameof(endOffset), "Property is not nullable for class MoiraScheduleData.");

            if (startOffset.IsSet && startOffset.Value == null)
                throw new ArgumentNullException(nameof(startOffset), "Property is not nullable for class MoiraScheduleData.");

            if (tzOffset.IsSet && tzOffset.Value == null)
                throw new ArgumentNullException(nameof(tzOffset), "Property is not nullable for class MoiraScheduleData.");

            return new MoiraScheduleData(days, endOffset, startOffset, tzOffset);
        }

        /// <summary>
        /// Serializes a <see cref="MoiraScheduleData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraScheduleData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MoiraScheduleData moiraScheduleData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, moiraScheduleData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MoiraScheduleData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="moiraScheduleData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MoiraScheduleData moiraScheduleData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (moiraScheduleData.DaysOption.IsSet && moiraScheduleData.Days == null)
                throw new ArgumentNullException(nameof(moiraScheduleData.Days), "Property is required for class MoiraScheduleData.");

            if (moiraScheduleData.DaysOption.IsSet)
            {
                writer.WritePropertyName("days");
                JsonSerializer.Serialize(writer, moiraScheduleData.Days, jsonSerializerOptions);
            }
            if (moiraScheduleData.EndOffsetOption.IsSet)
                writer.WriteNumber("endOffset", moiraScheduleData.EndOffsetOption.Value.Value);

            if (moiraScheduleData.StartOffsetOption.IsSet)
                writer.WriteNumber("startOffset", moiraScheduleData.StartOffsetOption.Value.Value);

            if (moiraScheduleData.TzOffsetOption.IsSet)
                writer.WriteNumber("tzOffset", moiraScheduleData.TzOffsetOption.Value.Value);
        }
    }
}
