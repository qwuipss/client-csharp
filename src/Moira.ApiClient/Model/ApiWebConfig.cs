// <auto-generated>
/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Moira.ApiClient.Client;

namespace Moira.ApiClient.Model
{
    /// <summary>
    /// ApiWebConfig
    /// </summary>
    public partial class ApiWebConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiWebConfig" /> class.
        /// </summary>
        /// <param name="contacts">contacts</param>
        /// <param name="featureFlags">featureFlags</param>
        /// <param name="metricSourceClusters">metricSourceClusters</param>
        /// <param name="remoteAllowed">remoteAllowed</param>
        /// <param name="sentry">sentry</param>
        /// <param name="supportEmail">supportEmail</param>
        [JsonConstructor]
        public ApiWebConfig(Option<List<ApiWebContact>> contacts = default, Option<ApiFeatureFlags> featureFlags = default, Option<List<ApiMetricSourceCluster>> metricSourceClusters = default, Option<bool?> remoteAllowed = default, Option<ApiSentry> sentry = default, Option<string> supportEmail = default)
        {
            ContactsOption = contacts;
            FeatureFlagsOption = featureFlags;
            MetricSourceClustersOption = metricSourceClusters;
            RemoteAllowedOption = remoteAllowed;
            SentryOption = sentry;
            SupportEmailOption = supportEmail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Contacts
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ApiWebContact>> ContactsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [JsonPropertyName("contacts")]
        public List<ApiWebContact> Contacts { get { return this.ContactsOption; } set { this.ContactsOption = new Option<List<ApiWebContact>>(value); } }

        /// <summary>
        /// Used to track the state of FeatureFlags
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiFeatureFlags> FeatureFlagsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FeatureFlags
        /// </summary>
        [JsonPropertyName("featureFlags")]
        public ApiFeatureFlags FeatureFlags { get { return this.FeatureFlagsOption; } set { this.FeatureFlagsOption = new Option<ApiFeatureFlags>(value); } }

        /// <summary>
        /// Used to track the state of MetricSourceClusters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ApiMetricSourceCluster>> MetricSourceClustersOption { get; private set; }

        /// <summary>
        /// Gets or Sets MetricSourceClusters
        /// </summary>
        [JsonPropertyName("metric_source_clusters")]
        public List<ApiMetricSourceCluster> MetricSourceClusters { get { return this.MetricSourceClustersOption; } set { this.MetricSourceClustersOption = new Option<List<ApiMetricSourceCluster>>(value); } }

        /// <summary>
        /// Used to track the state of RemoteAllowed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RemoteAllowedOption { get; private set; }

        /// <summary>
        /// Gets or Sets RemoteAllowed
        /// </summary>
        /* <example>true</example> */
        [JsonPropertyName("remoteAllowed")]
        public bool? RemoteAllowed { get { return this.RemoteAllowedOption; } set { this.RemoteAllowedOption = new Option<bool?>(value); } }

        /// <summary>
        /// Used to track the state of Sentry
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ApiSentry> SentryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sentry
        /// </summary>
        [JsonPropertyName("sentry")]
        public ApiSentry Sentry { get { return this.SentryOption; } set { this.SentryOption = new Option<ApiSentry>(value); } }

        /// <summary>
        /// Used to track the state of SupportEmail
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SupportEmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets SupportEmail
        /// </summary>
        /* <example>kontur.moira.alert@gmail.com</example> */
        [JsonPropertyName("supportEmail")]
        public string SupportEmail { get { return this.SupportEmailOption; } set { this.SupportEmailOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiWebConfig {\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  FeatureFlags: ").Append(FeatureFlags).Append("\n");
            sb.Append("  MetricSourceClusters: ").Append(MetricSourceClusters).Append("\n");
            sb.Append("  RemoteAllowed: ").Append(RemoteAllowed).Append("\n");
            sb.Append("  Sentry: ").Append(Sentry).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApiWebConfig" />
    /// </summary>
    public class ApiWebConfigJsonConverter : JsonConverter<ApiWebConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApiWebConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApiWebConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<ApiWebContact>> contacts = default;
            Option<ApiFeatureFlags> featureFlags = default;
            Option<List<ApiMetricSourceCluster>> metricSourceClusters = default;
            Option<bool?> remoteAllowed = default;
            Option<ApiSentry> sentry = default;
            Option<string> supportEmail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contacts":
                            contacts = new Option<List<ApiWebContact>>(JsonSerializer.Deserialize<List<ApiWebContact>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "featureFlags":
                            featureFlags = new Option<ApiFeatureFlags>(JsonSerializer.Deserialize<ApiFeatureFlags>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metric_source_clusters":
                            metricSourceClusters = new Option<List<ApiMetricSourceCluster>>(JsonSerializer.Deserialize<List<ApiMetricSourceCluster>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "remoteAllowed":
                            remoteAllowed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sentry":
                            sentry = new Option<ApiSentry>(JsonSerializer.Deserialize<ApiSentry>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "supportEmail":
                            supportEmail = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contacts.IsSet && contacts.Value == null)
                throw new ArgumentNullException(nameof(contacts), "Property is not nullable for class ApiWebConfig.");

            if (featureFlags.IsSet && featureFlags.Value == null)
                throw new ArgumentNullException(nameof(featureFlags), "Property is not nullable for class ApiWebConfig.");

            if (metricSourceClusters.IsSet && metricSourceClusters.Value == null)
                throw new ArgumentNullException(nameof(metricSourceClusters), "Property is not nullable for class ApiWebConfig.");

            if (remoteAllowed.IsSet && remoteAllowed.Value == null)
                throw new ArgumentNullException(nameof(remoteAllowed), "Property is not nullable for class ApiWebConfig.");

            if (sentry.IsSet && sentry.Value == null)
                throw new ArgumentNullException(nameof(sentry), "Property is not nullable for class ApiWebConfig.");

            if (supportEmail.IsSet && supportEmail.Value == null)
                throw new ArgumentNullException(nameof(supportEmail), "Property is not nullable for class ApiWebConfig.");

            return new ApiWebConfig(contacts, featureFlags, metricSourceClusters, remoteAllowed, sentry, supportEmail);
        }

        /// <summary>
        /// Serializes a <see cref="ApiWebConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiWebConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApiWebConfig apiWebConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, apiWebConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApiWebConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="apiWebConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApiWebConfig apiWebConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (apiWebConfig.ContactsOption.IsSet && apiWebConfig.Contacts == null)
                throw new ArgumentNullException(nameof(apiWebConfig.Contacts), "Property is required for class ApiWebConfig.");

            if (apiWebConfig.FeatureFlagsOption.IsSet && apiWebConfig.FeatureFlags == null)
                throw new ArgumentNullException(nameof(apiWebConfig.FeatureFlags), "Property is required for class ApiWebConfig.");

            if (apiWebConfig.MetricSourceClustersOption.IsSet && apiWebConfig.MetricSourceClusters == null)
                throw new ArgumentNullException(nameof(apiWebConfig.MetricSourceClusters), "Property is required for class ApiWebConfig.");

            if (apiWebConfig.SentryOption.IsSet && apiWebConfig.Sentry == null)
                throw new ArgumentNullException(nameof(apiWebConfig.Sentry), "Property is required for class ApiWebConfig.");

            if (apiWebConfig.SupportEmailOption.IsSet && apiWebConfig.SupportEmail == null)
                throw new ArgumentNullException(nameof(apiWebConfig.SupportEmail), "Property is required for class ApiWebConfig.");

            if (apiWebConfig.ContactsOption.IsSet)
            {
                writer.WritePropertyName("contacts");
                JsonSerializer.Serialize(writer, apiWebConfig.Contacts, jsonSerializerOptions);
            }
            if (apiWebConfig.FeatureFlagsOption.IsSet)
            {
                writer.WritePropertyName("featureFlags");
                JsonSerializer.Serialize(writer, apiWebConfig.FeatureFlags, jsonSerializerOptions);
            }
            if (apiWebConfig.MetricSourceClustersOption.IsSet)
            {
                writer.WritePropertyName("metric_source_clusters");
                JsonSerializer.Serialize(writer, apiWebConfig.MetricSourceClusters, jsonSerializerOptions);
            }
            if (apiWebConfig.RemoteAllowedOption.IsSet)
                writer.WriteBoolean("remoteAllowed", apiWebConfig.RemoteAllowedOption.Value.Value);

            if (apiWebConfig.SentryOption.IsSet)
            {
                writer.WritePropertyName("sentry");
                JsonSerializer.Serialize(writer, apiWebConfig.Sentry, jsonSerializerOptions);
            }
            if (apiWebConfig.SupportEmailOption.IsSet)
                writer.WriteString("supportEmail", apiWebConfig.SupportEmail);
        }
    }
}
