/*
 * Moira Alert
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: master
 * Contact: kontur.moira.alert@gmail.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Moira.ApiClient.Api;
using Moira.ApiClient.Model;

namespace Moira.ApiClient.Client
{
    /// <summary>
    /// Provides hosting configuration for Moira.ApiClient
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ApiErrorResponseJsonConverter());
            _jsonOptions.Converters.Add(new ApiFeatureFlagsJsonConverter());
            _jsonOptions.Converters.Add(new ApiMetricSourceClusterJsonConverter());
            _jsonOptions.Converters.Add(new ApiSentryJsonConverter());
            _jsonOptions.Converters.Add(new ApiWebConfigJsonConverter());
            _jsonOptions.Converters.Add(new ApiWebContactJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactEventItemJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactEventItemListJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactListJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactNoisinessJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactNoisinessListJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactScoreJsonConverter());
            _jsonOptions.Converters.Add(new DtoContactWithScoreJsonConverter());
            _jsonOptions.Converters.Add(new DtoEventsListJsonConverter());
            _jsonOptions.Converters.Add(new DtoMessageResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoNotificationDeleteResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoNotificationsListJsonConverter());
            _jsonOptions.Converters.Add(new DtoNotifierStateJsonConverter());
            _jsonOptions.Converters.Add(new DtoNotifierStateForSourceJsonConverter());
            _jsonOptions.Converters.Add(new DtoNotifierStatesForSourcesJsonConverter());
            _jsonOptions.Converters.Add(new DtoPatternDataJsonConverter());
            _jsonOptions.Converters.Add(new DtoPatternListJsonConverter());
            _jsonOptions.Converters.Add(new DtoPatternMetricsJsonConverter());
            _jsonOptions.Converters.Add(new DtoProblemOfTargetJsonConverter());
            _jsonOptions.Converters.Add(new DtoSaveTeamResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoSaveTriggerResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoSubscriptionJsonConverter());
            _jsonOptions.Converters.Add(new DtoSubscriptionListJsonConverter());
            _jsonOptions.Converters.Add(new DtoTagStatisticsJsonConverter());
            _jsonOptions.Converters.Add(new DtoTagsDataJsonConverter());
            _jsonOptions.Converters.Add(new DtoTagsStatisticsJsonConverter());
            _jsonOptions.Converters.Add(new DtoTeamContactJsonConverter());
            _jsonOptions.Converters.Add(new DtoTeamContactWithScoreJsonConverter());
            _jsonOptions.Converters.Add(new DtoTeamMembersJsonConverter());
            _jsonOptions.Converters.Add(new DtoTeamModelJsonConverter());
            _jsonOptions.Converters.Add(new DtoTeamSettingsJsonConverter());
            _jsonOptions.Converters.Add(new DtoTeamsListJsonConverter());
            _jsonOptions.Converters.Add(new DtoThrottlingResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoTreeOfProblemsJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerCheckJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerCheckResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerDumpJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerMaintenanceJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerModelJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerNoisinessJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggerNoisinessListJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggersListJsonConverter());
            _jsonOptions.Converters.Add(new DtoTriggersSearchResultDeleteResponseJsonConverter());
            _jsonOptions.Converters.Add(new DtoUserJsonConverter());
            _jsonOptions.Converters.Add(new DtoUserSettingsJsonConverter());
            _jsonOptions.Converters.Add(new DtoUserTeamsJsonConverter());
            _jsonOptions.Converters.Add(new MoiraCheckDataJsonConverter());
            _jsonOptions.Converters.Add(new MoiraContactDataJsonConverter());
            _jsonOptions.Converters.Add(new MoiraEventInfoJsonConverter());
            _jsonOptions.Converters.Add(new MoiraMaintenanceInfoJsonConverter());
            _jsonOptions.Converters.Add(new MoiraMetricStateJsonConverter());
            _jsonOptions.Converters.Add(new MoiraMetricValueJsonConverter());
            _jsonOptions.Converters.Add(new MoiraNotificationEventJsonConverter());
            _jsonOptions.Converters.Add(new MoiraPlottingDataJsonConverter());
            _jsonOptions.Converters.Add(new MoiraScheduleDataJsonConverter());
            _jsonOptions.Converters.Add(new MoiraScheduleDataDayJsonConverter());
            _jsonOptions.Converters.Add(new MoiraScheduledNotificationJsonConverter());
            _jsonOptions.Converters.Add(new MoiraSubscriptionDataJsonConverter());
            _jsonOptions.Converters.Add(new MoiraTriggerJsonConverter());
            _jsonOptions.Converters.Add(new MoiraTriggerCheckJsonConverter());
            _jsonOptions.Converters.Add(new MoiraTriggerDataJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<ConfigApiEvents>();
            _services.AddSingleton<ContactApiEvents>();
            _services.AddSingleton<EventApiEvents>();
            _services.AddSingleton<HealthApiEvents>();
            _services.AddSingleton<NotificationApiEvents>();
            _services.AddSingleton<PatternApiEvents>();
            _services.AddSingleton<SubscriptionApiEvents>();
            _services.AddSingleton<TagApiEvents>();
            _services.AddSingleton<TeamApiEvents>();
            _services.AddSingleton<TeamContactApiEvents>();
            _services.AddSingleton<TeamSubscriptionApiEvents>();
            _services.AddSingleton<TriggerApiEvents>();
            _services.AddSingleton<UserApiEvents>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddMoiraApiClientHttpClients
        (
            Action<HttpClient> client = null, Action<IHttpClientBuilder> builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IConfigApi, ConfigApi>(client));
            builders.Add(_services.AddHttpClient<IContactApi, ContactApi>(client));
            builders.Add(_services.AddHttpClient<IEventApi, EventApi>(client));
            builders.Add(_services.AddHttpClient<IHealthApi, HealthApi>(client));
            builders.Add(_services.AddHttpClient<INotificationApi, NotificationApi>(client));
            builders.Add(_services.AddHttpClient<IPatternApi, PatternApi>(client));
            builders.Add(_services.AddHttpClient<ISubscriptionApi, SubscriptionApi>(client));
            builders.Add(_services.AddHttpClient<ITagApi, TagApi>(client));
            builders.Add(_services.AddHttpClient<ITeamApi, TeamApi>(client));
            builders.Add(_services.AddHttpClient<ITeamContactApi, TeamContactApi>(client));
            builders.Add(_services.AddHttpClient<ITeamSubscriptionApi, TeamSubscriptionApi>(client));
            builders.Add(_services.AddHttpClient<ITriggerApi, TriggerApi>(client));
            builders.Add(_services.AddHttpClient<IUserApi, UserApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
